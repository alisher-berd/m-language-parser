{
    "description": "",
    "testCases": [
        {
            "input": "true and true or false or false ",
            "output": {
                "type": "logical-or-expression",
                "id": "logical-or-expression-0",
                "startIndex": 0,
                "stopIndex": 7,
                "leftOperand": {
                    "type": "logical-and-expression",
                    "id": "logical-and-expression-1",
                    "startIndex": 1,
                    "stopIndex": 3,
                    "leftOperand": {
                        "type": "literal-expression",
                        "id": "literal-expression-0",
                        "startIndex": 0,
                        "stopIndex": 1,
                        "literalValue": "true",
                        "literalType": "logical-literal"
                    },
                    "rightOperand": {
                        "type": "literal-expression",
                        "id": "literal-expression-2",
                        "startIndex": 2,
                        "stopIndex": 3,
                        "literalValue": "true",
                        "literalType": "logical-literal"
                    }
                },
                "rightOperand": {
                    "type": "logical-or-expression",
                    "id": "logical-or-expression-4",
                    "startIndex": 4,
                    "stopIndex": 7,
                    "leftOperand": {
                        "type": "literal-expression",
                        "id": "literal-expression-4",
                        "startIndex": 4,
                        "stopIndex": 5,
                        "literalValue": "false",
                        "literalType": "logical-literal"
                    },
                    "rightOperand": {
                        "type": "literal-expression",
                        "id": "literal-expression-6",
                        "startIndex": 6,
                        "stopIndex": 7,
                        "literalValue": "false",
                        "literalType": "logical-literal"
                    }
                }
            }
        },
        {
            "input": "true and false and true",
            "output": {
                "type": "logical-and-expression",
                "id": "logical-and-expression-3",
                "startIndex": 3,
                "stopIndex": 5,
                "leftOperand": {
                    "type": "logical-and-expression",
                    "id": "logical-and-expression-1",
                    "startIndex": 1,
                    "stopIndex": 3,
                    "leftOperand": {
                        "type": "literal-expression",
                        "id": "literal-expression-0",
                        "startIndex": 0,
                        "stopIndex": 1,
                        "literalValue": "true",
                        "literalType": "logical-literal"
                    },
                    "rightOperand": {
                        "type": "literal-expression",
                        "id": "literal-expression-2",
                        "startIndex": 2,
                        "stopIndex": 3,
                        "literalValue": "false",
                        "literalType": "logical-literal"
                    }
                },
                "rightOperand": {
                    "type": "literal-expression",
                    "id": "literal-expression-4",
                    "startIndex": 4,
                    "stopIndex": 5,
                    "literalValue": "true",
                    "literalType": "logical-literal"
                }
            }
        },
        {
            "input": "1 < 2 as any is nullable binary is datetime",
            "output": {
                "type": "is-expression",
                "id": "is-expression-8",
                "startIndex": 8,
                "stopIndex": 10,
                "sourceExpression": {
                    "type": "is-expression",
                    "id": "is-expression-5",
                    "startIndex": 5,
                    "stopIndex": 8,
                    "sourceExpression": {
                        "type": "as-expression",
                        "id": "as-expression-3",
                        "startIndex": 3,
                        "stopIndex": 5,
                        "sourceExpression": {
                            "type": "relational-expression",
                            "id": "relational-expression-0",
                            "startIndex": 0,
                            "stopIndex": 3,
                            "leftOperand": {
                                "type": "literal-expression",
                                "id": "literal-expression-0",
                                "startIndex": 0,
                                "stopIndex": 1,
                                "literalValue": "1",
                                "literalType": "number-literal"
                            },
                            "operator": "less-than",
                            "rightOperand": {
                                "type": "literal-expression",
                                "id": "literal-expression-2",
                                "startIndex": 2,
                                "stopIndex": 3,
                                "literalValue": "2",
                                "literalType": "number-literal"
                            }
                        },
                        "targetType": {
                            "nullableFlag": false,
                            "primitiveType": "any"
                        }
                    },
                    "targetType": {
                        "nullableFlag": true,
                        "primitiveType": "binary"
                    }
                },
                "targetType": {
                    "nullableFlag": false,
                    "primitiveType": "datetime"
                }
            }
        },
        {
            "input": "1 < 2 as any as nullable binary",
            "output": {
                "type": "as-expression",
                "id": "as-expression-5",
                "startIndex": 5,
                "stopIndex": 8,
                "sourceExpression": {
                    "type": "as-expression",
                    "id": "as-expression-3",
                    "startIndex": 3,
                    "stopIndex": 5,
                    "sourceExpression": {
                        "type": "relational-expression",
                        "id": "relational-expression-0",
                        "startIndex": 0,
                        "stopIndex": 3,
                        "leftOperand": {
                            "type": "literal-expression",
                            "id": "literal-expression-0",
                            "startIndex": 0,
                            "stopIndex": 1,
                            "literalValue": "1",
                            "literalType": "number-literal"
                        },
                        "operator": "less-than",
                        "rightOperand": {
                            "type": "literal-expression",
                            "id": "literal-expression-2",
                            "startIndex": 2,
                            "stopIndex": 3,
                            "literalValue": "2",
                            "literalType": "number-literal"
                        }
                    },
                    "targetType": {
                        "nullableFlag": false,
                        "primitiveType": "any"
                    }
                },
                "targetType": {
                    "nullableFlag": true,
                    "primitiveType": "binary"
                }
            }
        },
        {
            "input": "1 * 2 < 3 + 4   <>    1 / 4",
            "output": {
                "type": "equality-expression",
                "id": "equality-expression-0",
                "startIndex": 0,
                "stopIndex": 11,
                "leftOperand": {
                    "type": "relational-expression",
                    "id": "relational-expression-0",
                    "startIndex": 0,
                    "stopIndex": 7,
                    "leftOperand": {
                        "type": "multiplicative-expression",
                        "id": "multiplicative-expression-0",
                        "startIndex": 0,
                        "stopIndex": 3,
                        "leftOperand": {
                            "type": "literal-expression",
                            "id": "literal-expression-0",
                            "startIndex": 0,
                            "stopIndex": 1,
                            "literalValue": "1",
                            "literalType": "number-literal"
                        },
                        "operator": "multiply",
                        "rightOperand": {
                            "type": "literal-expression",
                            "id": "literal-expression-2",
                            "startIndex": 2,
                            "stopIndex": 3,
                            "literalValue": "2",
                            "literalType": "number-literal"
                        }
                    },
                    "operator": "less-than",
                    "rightOperand": {
                        "type": "additive-expression",
                        "id": "additive-expression-4",
                        "startIndex": 4,
                        "stopIndex": 7,
                        "leftOperand": {
                            "type": "literal-expression",
                            "id": "literal-expression-4",
                            "startIndex": 4,
                            "stopIndex": 5,
                            "literalValue": "3",
                            "literalType": "number-literal"
                        },
                        "operator": "plus",
                        "rightOperand": {
                            "type": "literal-expression",
                            "id": "literal-expression-6",
                            "startIndex": 6,
                            "stopIndex": 7,
                            "literalValue": "4",
                            "literalType": "number-literal"
                        }
                    }
                },
                "operator": "not-equal",
                "rightOperand": {
                    "type": "multiplicative-expression",
                    "id": "multiplicative-expression-8",
                    "startIndex": 8,
                    "stopIndex": 11,
                    "leftOperand": {
                        "type": "literal-expression",
                        "id": "literal-expression-8",
                        "startIndex": 8,
                        "stopIndex": 9,
                        "literalValue": "1",
                        "literalType": "number-literal"
                    },
                    "operator": "divide",
                    "rightOperand": {
                        "type": "literal-expression",
                        "id": "literal-expression-10",
                        "startIndex": 10,
                        "stopIndex": 11,
                        "literalValue": "4",
                        "literalType": "number-literal"
                    }
                }
            }
        },
        {
            "input": "1 * 2 < 3 + 4   =   1 / 4",
            "output": {
                "type": "equality-expression",
                "id": "equality-expression-0",
                "startIndex": 0,
                "stopIndex": 11,
                "leftOperand": {
                    "type": "relational-expression",
                    "id": "relational-expression-0",
                    "startIndex": 0,
                    "stopIndex": 7,
                    "leftOperand": {
                        "type": "multiplicative-expression",
                        "id": "multiplicative-expression-0",
                        "startIndex": 0,
                        "stopIndex": 3,
                        "leftOperand": {
                            "type": "literal-expression",
                            "id": "literal-expression-0",
                            "startIndex": 0,
                            "stopIndex": 1,
                            "literalValue": "1",
                            "literalType": "number-literal"
                        },
                        "operator": "multiply",
                        "rightOperand": {
                            "type": "literal-expression",
                            "id": "literal-expression-2",
                            "startIndex": 2,
                            "stopIndex": 3,
                            "literalValue": "2",
                            "literalType": "number-literal"
                        }
                    },
                    "operator": "less-than",
                    "rightOperand": {
                        "type": "additive-expression",
                        "id": "additive-expression-4",
                        "startIndex": 4,
                        "stopIndex": 7,
                        "leftOperand": {
                            "type": "literal-expression",
                            "id": "literal-expression-4",
                            "startIndex": 4,
                            "stopIndex": 5,
                            "literalValue": "3",
                            "literalType": "number-literal"
                        },
                        "operator": "plus",
                        "rightOperand": {
                            "type": "literal-expression",
                            "id": "literal-expression-6",
                            "startIndex": 6,
                            "stopIndex": 7,
                            "literalValue": "4",
                            "literalType": "number-literal"
                        }
                    }
                },
                "operator": "equal",
                "rightOperand": {
                    "type": "multiplicative-expression",
                    "id": "multiplicative-expression-8",
                    "startIndex": 8,
                    "stopIndex": 11,
                    "leftOperand": {
                        "type": "literal-expression",
                        "id": "literal-expression-8",
                        "startIndex": 8,
                        "stopIndex": 9,
                        "literalValue": "1",
                        "literalType": "number-literal"
                    },
                    "operator": "divide",
                    "rightOperand": {
                        "type": "literal-expression",
                        "id": "literal-expression-10",
                        "startIndex": 10,
                        "stopIndex": 11,
                        "literalValue": "4",
                        "literalType": "number-literal"
                    }
                }
            }
        },
        {
            "input": "1 * 2 + 3 * 4 < 1 * 2 + 3 * 4",
            "output": {
                "type": "relational-expression",
                "id": "relational-expression-0",
                "startIndex": 0,
                "stopIndex": 15,
                "leftOperand": {
                    "type": "additive-expression",
                    "id": "additive-expression-0",
                    "startIndex": 0,
                    "stopIndex": 7,
                    "leftOperand": {
                        "type": "multiplicative-expression",
                        "id": "multiplicative-expression-0",
                        "startIndex": 0,
                        "stopIndex": 3,
                        "leftOperand": {
                            "type": "literal-expression",
                            "id": "literal-expression-0",
                            "startIndex": 0,
                            "stopIndex": 1,
                            "literalValue": "1",
                            "literalType": "number-literal"
                        },
                        "operator": "multiply",
                        "rightOperand": {
                            "type": "literal-expression",
                            "id": "literal-expression-2",
                            "startIndex": 2,
                            "stopIndex": 3,
                            "literalValue": "2",
                            "literalType": "number-literal"
                        }
                    },
                    "operator": "plus",
                    "rightOperand": {
                        "type": "multiplicative-expression",
                        "id": "multiplicative-expression-4",
                        "startIndex": 4,
                        "stopIndex": 7,
                        "leftOperand": {
                            "type": "literal-expression",
                            "id": "literal-expression-4",
                            "startIndex": 4,
                            "stopIndex": 5,
                            "literalValue": "3",
                            "literalType": "number-literal"
                        },
                        "operator": "multiply",
                        "rightOperand": {
                            "type": "literal-expression",
                            "id": "literal-expression-6",
                            "startIndex": 6,
                            "stopIndex": 7,
                            "literalValue": "4",
                            "literalType": "number-literal"
                        }
                    }
                },
                "operator": "less-than",
                "rightOperand": {
                    "type": "additive-expression",
                    "id": "additive-expression-8",
                    "startIndex": 8,
                    "stopIndex": 15,
                    "leftOperand": {
                        "type": "multiplicative-expression",
                        "id": "multiplicative-expression-8",
                        "startIndex": 8,
                        "stopIndex": 11,
                        "leftOperand": {
                            "type": "literal-expression",
                            "id": "literal-expression-8",
                            "startIndex": 8,
                            "stopIndex": 9,
                            "literalValue": "1",
                            "literalType": "number-literal"
                        },
                        "operator": "multiply",
                        "rightOperand": {
                            "type": "literal-expression",
                            "id": "literal-expression-10",
                            "startIndex": 10,
                            "stopIndex": 11,
                            "literalValue": "2",
                            "literalType": "number-literal"
                        }
                    },
                    "operator": "plus",
                    "rightOperand": {
                        "type": "multiplicative-expression",
                        "id": "multiplicative-expression-12",
                        "startIndex": 12,
                        "stopIndex": 15,
                        "leftOperand": {
                            "type": "literal-expression",
                            "id": "literal-expression-12",
                            "startIndex": 12,
                            "stopIndex": 13,
                            "literalValue": "3",
                            "literalType": "number-literal"
                        },
                        "operator": "multiply",
                        "rightOperand": {
                            "type": "literal-expression",
                            "id": "literal-expression-14",
                            "startIndex": 14,
                            "stopIndex": 15,
                            "literalValue": "4",
                            "literalType": "number-literal"
                        }
                    }
                }
            }
        },
        {
            "input": "type binary meta not - + type [colName, optional colName, ...]    +     + {2, 2..5, 6}",
            "output": {
                "type": "additive-expression",
                "id": "additive-expression-0",
                "startIndex": 0,
                "stopIndex": 26,
                "leftOperand": {
                    "type": "metadata-expression",
                    "id": "metadata-expression-0",
                    "startIndex": 0,
                    "stopIndex": 15,
                    "expression": {
                        "type": "primitive-type",
                        "id": "primitive-type-1",
                        "startIndex": 1,
                        "stopIndex": 2,
                        "primitiveType": "binary"
                    },
                    "metaExpression": {
                        "type": "unary-expression",
                        "id": "unary-expression-3",
                        "startIndex": 3,
                        "stopIndex": 15,
                        "operator": "not",
                        "operand": {
                            "type": "unary-expression",
                            "id": "unary-expression-4",
                            "startIndex": 4,
                            "stopIndex": 15,
                            "operator": "minus",
                            "operand": {
                                "type": "unary-expression",
                                "id": "unary-expression-5",
                                "startIndex": 5,
                                "stopIndex": 15,
                                "operator": "plus",
                                "operand": {
                                    "type": "record-type",
                                    "id": "record-type-7",
                                    "startIndex": 7,
                                    "stopIndex": 15,
                                    "hasOpenRecordMarker": true,
                                    "fieldSpecificationList": [
                                        {
                                            "fieldName": "colName",
                                            "fieldType": null,
                                            "isOptional": false
                                        },
                                        {
                                            "fieldName": "colName",
                                            "fieldType": null,
                                            "isOptional": true
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "operator": "plus",
                "rightOperand": {
                    "type": "unary-expression",
                    "id": "unary-expression-16",
                    "startIndex": 16,
                    "stopIndex": 26,
                    "operator": "plus",
                    "operand": {
                        "type": "list-expression",
                        "id": "list-expression-17",
                        "startIndex": 17,
                        "stopIndex": 26,
                        "itemList": [
                            {
                                "type": "item",
                                "id": "item-18",
                                "startIndex": 18,
                                "stopIndex": 19,
                                "expression": {
                                    "type": "literal-expression",
                                    "id": "literal-expression-18",
                                    "startIndex": 18,
                                    "stopIndex": 19,
                                    "literalValue": "2",
                                    "literalType": "number-literal"
                                },
                                "isSequenceItem": false,
                                "secondExpression": null
                            },
                            {
                                "type": "item",
                                "id": "item-20",
                                "startIndex": 20,
                                "stopIndex": 23,
                                "expression": {
                                    "type": "literal-expression",
                                    "id": "literal-expression-20",
                                    "startIndex": 20,
                                    "stopIndex": 21,
                                    "literalValue": "2",
                                    "literalType": "number-literal"
                                },
                                "isSequenceItem": true,
                                "secondExpression": {
                                    "type": "literal-expression",
                                    "id": "literal-expression-22",
                                    "startIndex": 22,
                                    "stopIndex": 23,
                                    "literalValue": "5",
                                    "literalType": "number-literal"
                                }
                            },
                            {
                                "type": "item",
                                "id": "item-24",
                                "startIndex": 24,
                                "stopIndex": 25,
                                "expression": {
                                    "type": "literal-expression",
                                    "id": "literal-expression-24",
                                    "startIndex": 24,
                                    "stopIndex": 25,
                                    "literalValue": "6",
                                    "literalType": "number-literal"
                                },
                                "isSequenceItem": false,
                                "secondExpression": null
                            }
                        ]
                    }
                }
            }
        },
        {
            "input": "not 23 meta \"Hello!\"     &      - [columnName = 2, anotherCol = 4] meta not @columnName",
            "output": {
                "type": "additive-expression",
                "id": "additive-expression-0",
                "startIndex": 0,
                "stopIndex": 19,
                "leftOperand": {
                    "type": "metadata-expression",
                    "id": "metadata-expression-0",
                    "startIndex": 0,
                    "stopIndex": 4,
                    "expression": {
                        "type": "unary-expression",
                        "id": "unary-expression-0",
                        "startIndex": 0,
                        "stopIndex": 2,
                        "operator": "not",
                        "operand": {
                            "type": "literal-expression",
                            "id": "literal-expression-1",
                            "startIndex": 1,
                            "stopIndex": 2,
                            "literalValue": "23",
                            "literalType": "number-literal"
                        }
                    },
                    "metaExpression": {
                        "type": "literal-expression",
                        "id": "literal-expression-3",
                        "startIndex": 3,
                        "stopIndex": 4,
                        "literalValue": "\"Hello!\"",
                        "literalType": "text-literal"
                    }
                },
                "operator": "ampersand",
                "rightOperand": {
                    "type": "metadata-expression",
                    "id": "metadata-expression-5",
                    "startIndex": 5,
                    "stopIndex": 19,
                    "expression": {
                        "type": "unary-expression",
                        "id": "unary-expression-5",
                        "startIndex": 5,
                        "stopIndex": 15,
                        "operator": "minus",
                        "operand": {
                            "type": "record-expression",
                            "id": "record-expression-6",
                            "startIndex": 6,
                            "stopIndex": 15,
                            "fieldList": [
                                {
                                    "fieldName": "columnName",
                                    "expression": {
                                        "type": "literal-expression",
                                        "id": "literal-expression-9",
                                        "startIndex": 9,
                                        "stopIndex": 10,
                                        "literalValue": "2",
                                        "literalType": "number-literal"
                                    }
                                },
                                {
                                    "fieldName": "anotherCol",
                                    "expression": {
                                        "type": "literal-expression",
                                        "id": "literal-expression-13",
                                        "startIndex": 13,
                                        "stopIndex": 14,
                                        "literalValue": "4",
                                        "literalType": "number-literal"
                                    }
                                }
                            ]
                        }
                    },
                    "metaExpression": {
                        "type": "unary-expression",
                        "id": "unary-expression-16",
                        "startIndex": 16,
                        "stopIndex": 19,
                        "operator": "not",
                        "operand": {
                            "type": "identifier-expression",
                            "id": "identifier-expression-17",
                            "startIndex": 17,
                            "stopIndex": 19,
                            "identifierName": "columnName",
                            "isInclusive": true
                        }
                    }
                }
            }
        },
        {
            "input": "someFunction (2, a, 4)   +    tableName [[#\"Column name\"], [#\"Column name\"]] meta + tableName {2+2}?",
            "output": {
                "type": "additive-expression",
                "id": "additive-expression-0",
                "startIndex": 0,
                "stopIndex": 28,
                "leftOperand": {
                    "type": "invoke-expression",
                    "id": "invoke-expression-1",
                    "startIndex": 1,
                    "stopIndex": 8,
                    "invokedPrimaryExpression": {
                        "type": "identifier-expression",
                        "id": "identifier-expression-0",
                        "startIndex": 0,
                        "stopIndex": 1,
                        "identifierName": "someFunction",
                        "isInclusive": false
                    },
                    "argumentList": [
                        {
                            "type": "literal-expression",
                            "id": "literal-expression-2",
                            "startIndex": 2,
                            "stopIndex": 3,
                            "literalValue": "2",
                            "literalType": "number-literal"
                        },
                        {
                            "type": "identifier-expression",
                            "id": "identifier-expression-4",
                            "startIndex": 4,
                            "stopIndex": 5,
                            "identifierName": "a",
                            "isInclusive": false
                        },
                        {
                            "type": "literal-expression",
                            "id": "literal-expression-6",
                            "startIndex": 6,
                            "stopIndex": 7,
                            "literalValue": "4",
                            "literalType": "number-literal"
                        }
                    ]
                },
                "operator": "plus",
                "rightOperand": {
                    "type": "metadata-expression",
                    "id": "metadata-expression-9",
                    "startIndex": 9,
                    "stopIndex": 28,
                    "expression": {
                        "type": "field-access-expression",
                        "id": "field-access-expression-10",
                        "startIndex": 10,
                        "stopIndex": 19,
                        "selectedPrimaryExpression": {
                            "type": "identifier-expression",
                            "id": "identifier-expression-9",
                            "startIndex": 9,
                            "stopIndex": 10,
                            "identifierName": "tableName",
                            "isInclusive": false
                        },
                        "implicitTargetFieldSelection": null,
                        "implicitTargetProjection": [
                            "#\"Column name\"",
                            "#\"Column name\""
                        ],
                        "isOptionalSelection": false
                    },
                    "metaExpression": {
                        "type": "unary-expression",
                        "id": "unary-expression-20",
                        "startIndex": 20,
                        "stopIndex": 28,
                        "operator": "plus",
                        "operand": {
                            "type": "item-access-expression",
                            "id": "item-access-expression-22",
                            "startIndex": 22,
                            "stopIndex": 28,
                            "selectedPrimaryExpression": {
                                "type": "identifier-expression",
                                "id": "identifier-expression-21",
                                "startIndex": 21,
                                "stopIndex": 22,
                                "identifierName": "tableName",
                                "isInclusive": false
                            },
                            "itemSelector": {
                                "type": "additive-expression",
                                "id": "additive-expression-23",
                                "startIndex": 23,
                                "stopIndex": 26,
                                "leftOperand": {
                                    "type": "literal-expression",
                                    "id": "literal-expression-23",
                                    "startIndex": 23,
                                    "stopIndex": 24,
                                    "literalValue": "2",
                                    "literalType": "number-literal"
                                },
                                "operator": "plus",
                                "rightOperand": {
                                    "type": "literal-expression",
                                    "id": "literal-expression-25",
                                    "startIndex": 25,
                                    "stopIndex": 26,
                                    "literalValue": "2",
                                    "literalType": "number-literal"
                                }
                            },
                            "isOptionalSelection": true
                        }
                    }
                }
            }
        },
        {
            "input": "type binary meta not - + type [colName, optional colName, ...]    *     + {2, 2..5, 6}",
            "output": {
                "type": "multiplicative-expression",
                "id": "multiplicative-expression-0",
                "startIndex": 0,
                "stopIndex": 26,
                "leftOperand": {
                    "type": "metadata-expression",
                    "id": "metadata-expression-0",
                    "startIndex": 0,
                    "stopIndex": 15,
                    "expression": {
                        "type": "primitive-type",
                        "id": "primitive-type-1",
                        "startIndex": 1,
                        "stopIndex": 2,
                        "primitiveType": "binary"
                    },
                    "metaExpression": {
                        "type": "unary-expression",
                        "id": "unary-expression-3",
                        "startIndex": 3,
                        "stopIndex": 15,
                        "operator": "not",
                        "operand": {
                            "type": "unary-expression",
                            "id": "unary-expression-4",
                            "startIndex": 4,
                            "stopIndex": 15,
                            "operator": "minus",
                            "operand": {
                                "type": "unary-expression",
                                "id": "unary-expression-5",
                                "startIndex": 5,
                                "stopIndex": 15,
                                "operator": "plus",
                                "operand": {
                                    "type": "record-type",
                                    "id": "record-type-7",
                                    "startIndex": 7,
                                    "stopIndex": 15,
                                    "hasOpenRecordMarker": true,
                                    "fieldSpecificationList": [
                                        {
                                            "fieldName": "colName",
                                            "fieldType": null,
                                            "isOptional": false
                                        },
                                        {
                                            "fieldName": "colName",
                                            "fieldType": null,
                                            "isOptional": true
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "operator": "multiply",
                "rightOperand": {
                    "type": "unary-expression",
                    "id": "unary-expression-16",
                    "startIndex": 16,
                    "stopIndex": 26,
                    "operator": "plus",
                    "operand": {
                        "type": "list-expression",
                        "id": "list-expression-17",
                        "startIndex": 17,
                        "stopIndex": 26,
                        "itemList": [
                            {
                                "type": "item",
                                "id": "item-18",
                                "startIndex": 18,
                                "stopIndex": 19,
                                "expression": {
                                    "type": "literal-expression",
                                    "id": "literal-expression-18",
                                    "startIndex": 18,
                                    "stopIndex": 19,
                                    "literalValue": "2",
                                    "literalType": "number-literal"
                                },
                                "isSequenceItem": false,
                                "secondExpression": null
                            },
                            {
                                "type": "item",
                                "id": "item-20",
                                "startIndex": 20,
                                "stopIndex": 23,
                                "expression": {
                                    "type": "literal-expression",
                                    "id": "literal-expression-20",
                                    "startIndex": 20,
                                    "stopIndex": 21,
                                    "literalValue": "2",
                                    "literalType": "number-literal"
                                },
                                "isSequenceItem": true,
                                "secondExpression": {
                                    "type": "literal-expression",
                                    "id": "literal-expression-22",
                                    "startIndex": 22,
                                    "stopIndex": 23,
                                    "literalValue": "5",
                                    "literalType": "number-literal"
                                }
                            },
                            {
                                "type": "item",
                                "id": "item-24",
                                "startIndex": 24,
                                "stopIndex": 25,
                                "expression": {
                                    "type": "literal-expression",
                                    "id": "literal-expression-24",
                                    "startIndex": 24,
                                    "stopIndex": 25,
                                    "literalValue": "6",
                                    "literalType": "number-literal"
                                },
                                "isSequenceItem": false,
                                "secondExpression": null
                            }
                        ]
                    }
                }
            }
        },
        {
            "input": "not 23 meta \"Hello!\"     /      - [columnName = 2, anotherCol = 4] meta not @columnName",
            "output": {
                "type": "multiplicative-expression",
                "id": "multiplicative-expression-0",
                "startIndex": 0,
                "stopIndex": 19,
                "leftOperand": {
                    "type": "metadata-expression",
                    "id": "metadata-expression-0",
                    "startIndex": 0,
                    "stopIndex": 4,
                    "expression": {
                        "type": "unary-expression",
                        "id": "unary-expression-0",
                        "startIndex": 0,
                        "stopIndex": 2,
                        "operator": "not",
                        "operand": {
                            "type": "literal-expression",
                            "id": "literal-expression-1",
                            "startIndex": 1,
                            "stopIndex": 2,
                            "literalValue": "23",
                            "literalType": "number-literal"
                        }
                    },
                    "metaExpression": {
                        "type": "literal-expression",
                        "id": "literal-expression-3",
                        "startIndex": 3,
                        "stopIndex": 4,
                        "literalValue": "\"Hello!\"",
                        "literalType": "text-literal"
                    }
                },
                "operator": "divide",
                "rightOperand": {
                    "type": "metadata-expression",
                    "id": "metadata-expression-5",
                    "startIndex": 5,
                    "stopIndex": 19,
                    "expression": {
                        "type": "unary-expression",
                        "id": "unary-expression-5",
                        "startIndex": 5,
                        "stopIndex": 15,
                        "operator": "minus",
                        "operand": {
                            "type": "record-expression",
                            "id": "record-expression-6",
                            "startIndex": 6,
                            "stopIndex": 15,
                            "fieldList": [
                                {
                                    "fieldName": "columnName",
                                    "expression": {
                                        "type": "literal-expression",
                                        "id": "literal-expression-9",
                                        "startIndex": 9,
                                        "stopIndex": 10,
                                        "literalValue": "2",
                                        "literalType": "number-literal"
                                    }
                                },
                                {
                                    "fieldName": "anotherCol",
                                    "expression": {
                                        "type": "literal-expression",
                                        "id": "literal-expression-13",
                                        "startIndex": 13,
                                        "stopIndex": 14,
                                        "literalValue": "4",
                                        "literalType": "number-literal"
                                    }
                                }
                            ]
                        }
                    },
                    "metaExpression": {
                        "type": "unary-expression",
                        "id": "unary-expression-16",
                        "startIndex": 16,
                        "stopIndex": 19,
                        "operator": "not",
                        "operand": {
                            "type": "identifier-expression",
                            "id": "identifier-expression-17",
                            "startIndex": 17,
                            "stopIndex": 19,
                            "identifierName": "columnName",
                            "isInclusive": true
                        }
                    }
                }
            }
        },
        {
            "input": "someFunction (2, 1, 4)   *    tableName [[#\"Column name\"], [#\"Column name\"]] meta + tableName {2+2}?",
            "output": {
                "type": "multiplicative-expression",
                "id": "multiplicative-expression-0",
                "startIndex": 0,
                "stopIndex": 28,
                "leftOperand": {
                    "type": "invoke-expression",
                    "id": "invoke-expression-1",
                    "startIndex": 1,
                    "stopIndex": 8,
                    "invokedPrimaryExpression": {
                        "type": "identifier-expression",
                        "id": "identifier-expression-0",
                        "startIndex": 0,
                        "stopIndex": 1,
                        "identifierName": "someFunction",
                        "isInclusive": false
                    },
                    "argumentList": [
                        {
                            "type": "literal-expression",
                            "id": "literal-expression-2",
                            "startIndex": 2,
                            "stopIndex": 3,
                            "literalValue": "2",
                            "literalType": "number-literal"
                        },
                        {
                            "type": "literal-expression",
                            "id": "literal-expression-4",
                            "startIndex": 4,
                            "stopIndex": 5,
                            "literalValue": "1",
                            "literalType": "number-literal"
                        },
                        {
                            "type": "literal-expression",
                            "id": "literal-expression-6",
                            "startIndex": 6,
                            "stopIndex": 7,
                            "literalValue": "4",
                            "literalType": "number-literal"
                        }
                    ]
                },
                "operator": "multiply",
                "rightOperand": {
                    "type": "metadata-expression",
                    "id": "metadata-expression-9",
                    "startIndex": 9,
                    "stopIndex": 28,
                    "expression": {
                        "type": "field-access-expression",
                        "id": "field-access-expression-10",
                        "startIndex": 10,
                        "stopIndex": 19,
                        "selectedPrimaryExpression": {
                            "type": "identifier-expression",
                            "id": "identifier-expression-9",
                            "startIndex": 9,
                            "stopIndex": 10,
                            "identifierName": "tableName",
                            "isInclusive": false
                        },
                        "implicitTargetFieldSelection": null,
                        "implicitTargetProjection": [
                            "#\"Column name\"",
                            "#\"Column name\""
                        ],
                        "isOptionalSelection": false
                    },
                    "metaExpression": {
                        "type": "unary-expression",
                        "id": "unary-expression-20",
                        "startIndex": 20,
                        "stopIndex": 28,
                        "operator": "plus",
                        "operand": {
                            "type": "item-access-expression",
                            "id": "item-access-expression-22",
                            "startIndex": 22,
                            "stopIndex": 28,
                            "selectedPrimaryExpression": {
                                "type": "identifier-expression",
                                "id": "identifier-expression-21",
                                "startIndex": 21,
                                "stopIndex": 22,
                                "identifierName": "tableName",
                                "isInclusive": false
                            },
                            "itemSelector": {
                                "type": "additive-expression",
                                "id": "additive-expression-23",
                                "startIndex": 23,
                                "stopIndex": 26,
                                "leftOperand": {
                                    "type": "literal-expression",
                                    "id": "literal-expression-23",
                                    "startIndex": 23,
                                    "stopIndex": 24,
                                    "literalValue": "2",
                                    "literalType": "number-literal"
                                },
                                "operator": "plus",
                                "rightOperand": {
                                    "type": "literal-expression",
                                    "id": "literal-expression-25",
                                    "startIndex": 25,
                                    "stopIndex": 26,
                                    "literalValue": "2",
                                    "literalType": "number-literal"
                                }
                            },
                            "isOptionalSelection": true
                        }
                    }
                }
            }
        },
        {
            "input": "type binary meta not - + type [colName, optional colName, ...]",
            "output": {
                "type": "metadata-expression",
                "id": "metadata-expression-0",
                "startIndex": 0,
                "stopIndex": 15,
                "expression": {
                    "type": "primitive-type",
                    "id": "primitive-type-1",
                    "startIndex": 1,
                    "stopIndex": 2,
                    "primitiveType": "binary"
                },
                "metaExpression": {
                    "type": "unary-expression",
                    "id": "unary-expression-3",
                    "startIndex": 3,
                    "stopIndex": 15,
                    "operator": "not",
                    "operand": {
                        "type": "unary-expression",
                        "id": "unary-expression-4",
                        "startIndex": 4,
                        "stopIndex": 15,
                        "operator": "minus",
                        "operand": {
                            "type": "unary-expression",
                            "id": "unary-expression-5",
                            "startIndex": 5,
                            "stopIndex": 15,
                            "operator": "plus",
                            "operand": {
                                "type": "record-type",
                                "id": "record-type-7",
                                "startIndex": 7,
                                "stopIndex": 15,
                                "hasOpenRecordMarker": true,
                                "fieldSpecificationList": [
                                    {
                                        "fieldName": "colName",
                                        "fieldType": null,
                                        "isOptional": false
                                    },
                                    {
                                        "fieldName": "colName",
                                        "fieldType": null,
                                        "isOptional": true
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        {
            "input": "not 23 meta \"Hello!\"",
            "output": {
                "type": "metadata-expression",
                "id": "metadata-expression-0",
                "startIndex": 0,
                "stopIndex": 4,
                "expression": {
                    "type": "unary-expression",
                    "id": "unary-expression-0",
                    "startIndex": 0,
                    "stopIndex": 2,
                    "operator": "not",
                    "operand": {
                        "type": "literal-expression",
                        "id": "literal-expression-1",
                        "startIndex": 1,
                        "stopIndex": 2,
                        "literalValue": "23",
                        "literalType": "number-literal"
                    }
                },
                "metaExpression": {
                    "type": "literal-expression",
                    "id": "literal-expression-3",
                    "startIndex": 3,
                    "stopIndex": 4,
                    "literalValue": "\"Hello!\"",
                    "literalType": "text-literal"
                }
            }
        },
        {
            "input": "- [columnName = 2, anotherCol = 4] meta not @columnName",
            "output": {
                "type": "metadata-expression",
                "id": "metadata-expression-0",
                "startIndex": 0,
                "stopIndex": 14,
                "expression": {
                    "type": "unary-expression",
                    "id": "unary-expression-0",
                    "startIndex": 0,
                    "stopIndex": 10,
                    "operator": "minus",
                    "operand": {
                        "type": "record-expression",
                        "id": "record-expression-1",
                        "startIndex": 1,
                        "stopIndex": 10,
                        "fieldList": [
                            {
                                "fieldName": "columnName",
                                "expression": {
                                    "type": "literal-expression",
                                    "id": "literal-expression-4",
                                    "startIndex": 4,
                                    "stopIndex": 5,
                                    "literalValue": "2",
                                    "literalType": "number-literal"
                                }
                            },
                            {
                                "fieldName": "anotherCol",
                                "expression": {
                                    "type": "literal-expression",
                                    "id": "literal-expression-8",
                                    "startIndex": 8,
                                    "stopIndex": 9,
                                    "literalValue": "4",
                                    "literalType": "number-literal"
                                }
                            }
                        ]
                    }
                },
                "metaExpression": {
                    "type": "unary-expression",
                    "id": "unary-expression-11",
                    "startIndex": 11,
                    "stopIndex": 14,
                    "operator": "not",
                    "operand": {
                        "type": "identifier-expression",
                        "id": "identifier-expression-12",
                        "startIndex": 12,
                        "stopIndex": 14,
                        "identifierName": "columnName",
                        "isInclusive": true
                    }
                }
            }
        },
        {
            "input": "- [[tableName.columnName], [tableName.columnName]]? meta not tableName [[tableName.columnName], [tableName.columnName]]?",
            "output": {
                "type": "metadata-expression",
                "id": "metadata-expression-0",
                "startIndex": 0,
                "stopIndex": 24,
                "expression": {
                    "type": "unary-expression",
                    "id": "unary-expression-0",
                    "startIndex": 0,
                    "stopIndex": 11,
                    "operator": "minus",
                    "operand": {
                        "type": "field-access-expression",
                        "id": "field-access-expression-1",
                        "startIndex": 1,
                        "stopIndex": 11,
                        "selectedPrimaryExpression": null,
                        "implicitTargetFieldSelection": null,
                        "implicitTargetProjection": [
                            "tableName.columnName",
                            "tableName.columnName"
                        ],
                        "isOptionalSelection": true
                    }
                },
                "metaExpression": {
                    "type": "unary-expression",
                    "id": "unary-expression-12",
                    "startIndex": 12,
                    "stopIndex": 24,
                    "operator": "not",
                    "operand": {
                        "type": "field-access-expression",
                        "id": "field-access-expression-14",
                        "startIndex": 14,
                        "stopIndex": 24,
                        "selectedPrimaryExpression": {
                            "type": "identifier-expression",
                            "id": "identifier-expression-13",
                            "startIndex": 13,
                            "stopIndex": 14,
                            "identifierName": "tableName",
                            "isInclusive": false
                        },
                        "implicitTargetFieldSelection": null,
                        "implicitTargetProjection": [
                            "tableName.columnName",
                            "tableName.columnName"
                        ],
                        "isOptionalSelection": true
                    }
                }
            }
        },
        {
            "input": "tableName [[#\"Column name\"], [#\"Column name\"]] meta + tableName {2+2}?",
            "output": {
                "type": "metadata-expression",
                "id": "metadata-expression-0",
                "startIndex": 0,
                "stopIndex": 19,
                "expression": {
                    "type": "field-access-expression",
                    "id": "field-access-expression-1",
                    "startIndex": 1,
                    "stopIndex": 10,
                    "selectedPrimaryExpression": {
                        "type": "identifier-expression",
                        "id": "identifier-expression-0",
                        "startIndex": 0,
                        "stopIndex": 1,
                        "identifierName": "tableName",
                        "isInclusive": false
                    },
                    "implicitTargetFieldSelection": null,
                    "implicitTargetProjection": [
                        "#\"Column name\"",
                        "#\"Column name\""
                    ],
                    "isOptionalSelection": false
                },
                "metaExpression": {
                    "type": "unary-expression",
                    "id": "unary-expression-11",
                    "startIndex": 11,
                    "stopIndex": 19,
                    "operator": "plus",
                    "operand": {
                        "type": "item-access-expression",
                        "id": "item-access-expression-13",
                        "startIndex": 13,
                        "stopIndex": 19,
                        "selectedPrimaryExpression": {
                            "type": "identifier-expression",
                            "id": "identifier-expression-12",
                            "startIndex": 12,
                            "stopIndex": 13,
                            "identifierName": "tableName",
                            "isInclusive": false
                        },
                        "itemSelector": {
                            "type": "additive-expression",
                            "id": "additive-expression-14",
                            "startIndex": 14,
                            "stopIndex": 17,
                            "leftOperand": {
                                "type": "literal-expression",
                                "id": "literal-expression-14",
                                "startIndex": 14,
                                "stopIndex": 15,
                                "literalValue": "2",
                                "literalType": "number-literal"
                            },
                            "operator": "plus",
                            "rightOperand": {
                                "type": "literal-expression",
                                "id": "literal-expression-16",
                                "startIndex": 16,
                                "stopIndex": 17,
                                "literalValue": "2",
                                "literalType": "number-literal"
                            }
                        },
                        "isOptionalSelection": true
                    }
                }
            }
        },
        {
            "input": "not - + type [colName, optional colName, ...]",
            "output": {
                "type": "unary-expression",
                "id": "unary-expression-0",
                "startIndex": 0,
                "stopIndex": 12,
                "operator": "not",
                "operand": {
                    "type": "unary-expression",
                    "id": "unary-expression-1",
                    "startIndex": 1,
                    "stopIndex": 12,
                    "operator": "minus",
                    "operand": {
                        "type": "unary-expression",
                        "id": "unary-expression-2",
                        "startIndex": 2,
                        "stopIndex": 12,
                        "operator": "plus",
                        "operand": {
                            "type": "record-type",
                            "id": "record-type-4",
                            "startIndex": 4,
                            "stopIndex": 12,
                            "hasOpenRecordMarker": true,
                            "fieldSpecificationList": [
                                {
                                    "fieldName": "colName",
                                    "fieldType": null,
                                    "isOptional": false
                                },
                                {
                                    "fieldName": "colName",
                                    "fieldType": null,
                                    "isOptional": true
                                }
                            ]
                        }
                    }
                }
            }
        },
        {
            "input": "- type function (col2 as binary, optional col2 as any) as nullable table",
            "output": {
                "type": "unary-expression",
                "id": "unary-expression-0",
                "startIndex": 0,
                "stopIndex": 16,
                "operator": "minus",
                "operand": {
                    "type": "function-type",
                    "id": "function-type-2",
                    "startIndex": 2,
                    "stopIndex": 16,
                    "requiredParameterSpecificationList": [
                        {
                            "parameterName": "col2",
                            "parameterType": {
                                "type": "primitive-type",
                                "id": "primitive-type-6",
                                "startIndex": 6,
                                "stopIndex": 7,
                                "primitiveType": "binary"
                            },
                            "isOptional": false
                        }
                    ],
                    "optionalParameterSpecificationList": [
                        {
                            "parameterName": "col2",
                            "parameterType": {
                                "type": "primitive-type",
                                "id": "primitive-type-11",
                                "startIndex": 11,
                                "stopIndex": 12,
                                "primitiveType": "any"
                            },
                            "isOptional": true
                        }
                    ],
                    "parameterSpecificationList": [
                        {
                            "parameterName": "col2",
                            "parameterType": {
                                "type": "primitive-type",
                                "id": "primitive-type-6",
                                "startIndex": 6,
                                "stopIndex": 7,
                                "primitiveType": "binary"
                            },
                            "isOptional": false
                        },
                        {
                            "parameterName": "col2",
                            "parameterType": {
                                "type": "primitive-type",
                                "id": "primitive-type-11",
                                "startIndex": 11,
                                "stopIndex": 12,
                                "primitiveType": "any"
                            },
                            "isOptional": true
                        }
                    ],
                    "returnType": {
                        "nullableFlag": true,
                        "primitiveType": "table"
                    }
                }
            }
        },
        {
            "input": "not 23",
            "output": {
                "type": "unary-expression",
                "id": "unary-expression-0",
                "startIndex": 0,
                "stopIndex": 2,
                "operator": "not",
                "operand": {
                    "type": "literal-expression",
                    "id": "literal-expression-1",
                    "startIndex": 1,
                    "stopIndex": 2,
                    "literalValue": "23",
                    "literalType": "number-literal"
                }
            }
        },
        {
            "input": "+ {2, 2..5, 6}",
            "output": {
                "type": "unary-expression",
                "id": "unary-expression-0",
                "startIndex": 0,
                "stopIndex": 10,
                "operator": "plus",
                "operand": {
                    "type": "list-expression",
                    "id": "list-expression-1",
                    "startIndex": 1,
                    "stopIndex": 10,
                    "itemList": [
                        {
                            "type": "item",
                            "id": "item-2",
                            "startIndex": 2,
                            "stopIndex": 3,
                            "expression": {
                                "type": "literal-expression",
                                "id": "literal-expression-2",
                                "startIndex": 2,
                                "stopIndex": 3,
                                "literalValue": "2",
                                "literalType": "number-literal"
                            },
                            "isSequenceItem": false,
                            "secondExpression": null
                        },
                        {
                            "type": "item",
                            "id": "item-4",
                            "startIndex": 4,
                            "stopIndex": 7,
                            "expression": {
                                "type": "literal-expression",
                                "id": "literal-expression-4",
                                "startIndex": 4,
                                "stopIndex": 5,
                                "literalValue": "2",
                                "literalType": "number-literal"
                            },
                            "isSequenceItem": true,
                            "secondExpression": {
                                "type": "literal-expression",
                                "id": "literal-expression-6",
                                "startIndex": 6,
                                "stopIndex": 7,
                                "literalValue": "5",
                                "literalType": "number-literal"
                            }
                        },
                        {
                            "type": "item",
                            "id": "item-8",
                            "startIndex": 8,
                            "stopIndex": 9,
                            "expression": {
                                "type": "literal-expression",
                                "id": "literal-expression-8",
                                "startIndex": 8,
                                "stopIndex": 9,
                                "literalValue": "6",
                                "literalType": "number-literal"
                            },
                            "isSequenceItem": false,
                            "secondExpression": null
                        }
                    ]
                }
            }
        },
        {
            "input": "- [columnName = 2, anotherCol = 4]",
            "output": {
                "type": "unary-expression",
                "id": "unary-expression-0",
                "startIndex": 0,
                "stopIndex": 10,
                "operator": "minus",
                "operand": {
                    "type": "record-expression",
                    "id": "record-expression-1",
                    "startIndex": 1,
                    "stopIndex": 10,
                    "fieldList": [
                        {
                            "fieldName": "columnName",
                            "expression": {
                                "type": "literal-expression",
                                "id": "literal-expression-4",
                                "startIndex": 4,
                                "stopIndex": 5,
                                "literalValue": "2",
                                "literalType": "number-literal"
                            }
                        },
                        {
                            "fieldName": "anotherCol",
                            "expression": {
                                "type": "literal-expression",
                                "id": "literal-expression-8",
                                "startIndex": 8,
                                "stopIndex": 9,
                                "literalValue": "4",
                                "literalType": "number-literal"
                            }
                        }
                    ]
                }
            }
        },
        {
            "input": "not @columnName",
            "output": {
                "type": "unary-expression",
                "id": "unary-expression-0",
                "startIndex": 0,
                "stopIndex": 3,
                "operator": "not",
                "operand": {
                    "type": "identifier-expression",
                    "id": "identifier-expression-1",
                    "startIndex": 1,
                    "stopIndex": 3,
                    "identifierName": "columnName",
                    "isInclusive": true
                }
            }
        },
        {
            "input": "not + (columnName)",
            "output": {
                "type": "unary-expression",
                "id": "unary-expression-0",
                "startIndex": 0,
                "stopIndex": 5,
                "operator": "not",
                "operand": {
                    "type": "unary-expression",
                    "id": "unary-expression-1",
                    "startIndex": 1,
                    "stopIndex": 5,
                    "operator": "plus",
                    "operand": {
                        "type": "identifier-expression",
                        "id": "identifier-expression-3",
                        "startIndex": 2,
                        "stopIndex": 5,
                        "identifierName": "columnName",
                        "isInclusive": false
                    }
                }
            }
        },
        {
            "input": "- [[tableName.columnName], [tableName.columnName]]?",
            "output": {
                "type": "unary-expression",
                "id": "unary-expression-0",
                "startIndex": 0,
                "stopIndex": 11,
                "operator": "minus",
                "operand": {
                    "type": "field-access-expression",
                    "id": "field-access-expression-1",
                    "startIndex": 1,
                    "stopIndex": 11,
                    "selectedPrimaryExpression": null,
                    "implicitTargetFieldSelection": null,
                    "implicitTargetProjection": [
                        "tableName.columnName",
                        "tableName.columnName"
                    ],
                    "isOptionalSelection": true
                }
            }
        },
        {
            "input": "not tableName [[tableName.columnName], [tableName.columnName]]?",
            "output": {
                "type": "unary-expression",
                "id": "unary-expression-0",
                "startIndex": 0,
                "stopIndex": 12,
                "operator": "not",
                "operand": {
                    "type": "field-access-expression",
                    "id": "field-access-expression-2",
                    "startIndex": 2,
                    "stopIndex": 12,
                    "selectedPrimaryExpression": {
                        "type": "identifier-expression",
                        "id": "identifier-expression-1",
                        "startIndex": 1,
                        "stopIndex": 2,
                        "identifierName": "tableName",
                        "isInclusive": false
                    },
                    "implicitTargetFieldSelection": null,
                    "implicitTargetProjection": [
                        "tableName.columnName",
                        "tableName.columnName"
                    ],
                    "isOptionalSelection": true
                }
            }
        },
        {
            "input": "+ tableName {2+2}?",
            "output": {
                "type": "unary-expression",
                "id": "unary-expression-0",
                "startIndex": 0,
                "stopIndex": 8,
                "operator": "plus",
                "operand": {
                    "type": "item-access-expression",
                    "id": "item-access-expression-2",
                    "startIndex": 2,
                    "stopIndex": 8,
                    "selectedPrimaryExpression": {
                        "type": "identifier-expression",
                        "id": "identifier-expression-1",
                        "startIndex": 1,
                        "stopIndex": 2,
                        "identifierName": "tableName",
                        "isInclusive": false
                    },
                    "itemSelector": {
                        "type": "additive-expression",
                        "id": "additive-expression-3",
                        "startIndex": 3,
                        "stopIndex": 6,
                        "leftOperand": {
                            "type": "literal-expression",
                            "id": "literal-expression-3",
                            "startIndex": 3,
                            "stopIndex": 4,
                            "literalValue": "2",
                            "literalType": "number-literal"
                        },
                        "operator": "plus",
                        "rightOperand": {
                            "type": "literal-expression",
                            "id": "literal-expression-5",
                            "startIndex": 5,
                            "stopIndex": 6,
                            "literalValue": "2",
                            "literalType": "number-literal"
                        }
                    },
                    "isOptionalSelection": true
                }
            }
        },
        {
            "input": "- someFunction (2, a, 4)",
            "output": {
                "type": "unary-expression",
                "id": "unary-expression-0",
                "startIndex": 0,
                "stopIndex": 9,
                "operator": "minus",
                "operand": {
                    "type": "invoke-expression",
                    "id": "invoke-expression-2",
                    "startIndex": 2,
                    "stopIndex": 9,
                    "invokedPrimaryExpression": {
                        "type": "identifier-expression",
                        "id": "identifier-expression-1",
                        "startIndex": 1,
                        "stopIndex": 2,
                        "identifierName": "someFunction",
                        "isInclusive": false
                    },
                    "argumentList": [
                        {
                            "type": "literal-expression",
                            "id": "literal-expression-3",
                            "startIndex": 3,
                            "stopIndex": 4,
                            "literalValue": "2",
                            "literalType": "number-literal"
                        },
                        {
                            "type": "identifier-expression",
                            "id": "identifier-expression-5",
                            "startIndex": 5,
                            "stopIndex": 6,
                            "identifierName": "a",
                            "isInclusive": false
                        },
                        {
                            "type": "literal-expression",
                            "id": "literal-expression-7",
                            "startIndex": 7,
                            "stopIndex": 8,
                            "literalValue": "4",
                            "literalType": "number-literal"
                        }
                    ]
                }
            }
        },
        {
            "input": "type any",
            "output": {
                "type": "primitive-type",
                "id": "primitive-type-1",
                "startIndex": 1,
                "stopIndex": 2,
                "primitiveType": "any"
            }
        },
        {
            "input": "type function",
            "output": {
                "type": "primitive-type",
                "id": "primitive-type-1",
                "startIndex": 1,
                "stopIndex": 2,
                "primitiveType": "function"
            }
        },
        {
            "input": "type binary",
            "output": {
                "type": "primitive-type",
                "id": "primitive-type-1",
                "startIndex": 1,
                "stopIndex": 2,
                "primitiveType": "binary"
            }
        },
        {
            "input": "type {any}",
            "output": {
                "type": "list-type",
                "id": "list-type-1",
                "startIndex": 1,
                "stopIndex": 4,
                "itemType": {
                    "type": "primitive-type",
                    "id": "primitive-type-2",
                    "startIndex": 2,
                    "stopIndex": 3,
                    "primitiveType": "any"
                }
            }
        },
        {
            "input": "type [...]",
            "output": {
                "type": "record-type",
                "id": "record-type-1",
                "startIndex": 1,
                "stopIndex": 4,
                "hasOpenRecordMarker": true,
                "fieldSpecificationList": []
            }
        },
        {
            "input": "type []",
            "output": {
                "type": "record-type",
                "id": "record-type-1",
                "startIndex": 1,
                "stopIndex": 3,
                "hasOpenRecordMarker": false,
                "fieldSpecificationList": []
            }
        },
        {
            "input": "type [colName, optional colName = binary, optional colName = any]",
            "output": {
                "type": "record-type",
                "id": "record-type-1",
                "startIndex": 1,
                "stopIndex": 14,
                "hasOpenRecordMarker": false,
                "fieldSpecificationList": [
                    {
                        "fieldName": "colName",
                        "fieldType": null,
                        "isOptional": false
                    },
                    {
                        "fieldName": "colName",
                        "fieldType": {
                            "type": "primitive-type",
                            "id": "primitive-type-7",
                            "startIndex": 7,
                            "stopIndex": 8,
                            "primitiveType": "binary"
                        },
                        "isOptional": true
                    },
                    {
                        "fieldName": "colName",
                        "fieldType": {
                            "type": "primitive-type",
                            "id": "primitive-type-12",
                            "startIndex": 12,
                            "stopIndex": 13,
                            "primitiveType": "any"
                        },
                        "isOptional": true
                    }
                ]
            }
        },
        {
            "input": "type [colName, optional colName, ...]",
            "output": {
                "type": "record-type",
                "id": "record-type-1",
                "startIndex": 1,
                "stopIndex": 9,
                "hasOpenRecordMarker": true,
                "fieldSpecificationList": [
                    {
                        "fieldName": "colName",
                        "fieldType": null,
                        "isOptional": false
                    },
                    {
                        "fieldName": "colName",
                        "fieldType": null,
                        "isOptional": true
                    }
                ]
            }
        },
        {
            "input": "type table []",
            "output": {
                "type": "table-type",
                "id": "table-type-1",
                "startIndex": 1,
                "stopIndex": 4,
                "fieldSpecificationList": []
            }
        },
        {
            "input": "type table [colName = binary, optional colName, optional colName = any]",
            "output": {
                "type": "table-type",
                "id": "table-type-1",
                "startIndex": 1,
                "stopIndex": 15,
                "fieldSpecificationList": [
                    {
                        "fieldName": "colName",
                        "fieldType": {
                            "type": "primitive-type",
                            "id": "primitive-type-5",
                            "startIndex": 5,
                            "stopIndex": 6,
                            "primitiveType": "binary"
                        },
                        "isOptional": false
                    },
                    {
                        "fieldName": "colName",
                        "fieldType": null,
                        "isOptional": true
                    },
                    {
                        "fieldName": "colName",
                        "fieldType": {
                            "type": "primitive-type",
                            "id": "primitive-type-13",
                            "startIndex": 13,
                            "stopIndex": 14,
                            "primitiveType": "any"
                        },
                        "isOptional": true
                    }
                ]
            }
        },
        {
            "input": "type function () as table",
            "output": {
                "type": "function-type",
                "id": "function-type-1",
                "startIndex": 1,
                "stopIndex": 6,
                "requiredParameterSpecificationList": [],
                "optionalParameterSpecificationList": [],
                "parameterSpecificationList": [],
                "returnType": {
                    "nullableFlag": false,
                    "primitiveType": "table"
                }
            }
        },
        {
            "input": "type function (optional col1 as binary, optional col2 as any) as nullable table",
            "output": {
                "type": "function-type",
                "id": "function-type-1",
                "startIndex": 1,
                "stopIndex": 16,
                "requiredParameterSpecificationList": [],
                "optionalParameterSpecificationList": [
                    {
                        "parameterName": "col1",
                        "parameterType": {
                            "type": "primitive-type",
                            "id": "primitive-type-6",
                            "startIndex": 6,
                            "stopIndex": 7,
                            "primitiveType": "binary"
                        },
                        "isOptional": true
                    },
                    {
                        "parameterName": "col2",
                        "parameterType": {
                            "type": "primitive-type",
                            "id": "primitive-type-11",
                            "startIndex": 11,
                            "stopIndex": 12,
                            "primitiveType": "any"
                        },
                        "isOptional": true
                    }
                ],
                "parameterSpecificationList": [
                    {
                        "parameterName": "col1",
                        "parameterType": {
                            "type": "primitive-type",
                            "id": "primitive-type-6",
                            "startIndex": 6,
                            "stopIndex": 7,
                            "primitiveType": "binary"
                        },
                        "isOptional": true
                    },
                    {
                        "parameterName": "col2",
                        "parameterType": {
                            "type": "primitive-type",
                            "id": "primitive-type-11",
                            "startIndex": 11,
                            "stopIndex": 12,
                            "primitiveType": "any"
                        },
                        "isOptional": true
                    }
                ],
                "returnType": {
                    "nullableFlag": true,
                    "primitiveType": "table"
                }
            }
        },
        {
            "input": "type function (col1 as binary, col2 as any) as table",
            "output": {
                "type": "function-type",
                "id": "function-type-1",
                "startIndex": 1,
                "stopIndex": 13,
                "requiredParameterSpecificationList": [
                    {
                        "parameterName": "col1",
                        "parameterType": {
                            "type": "primitive-type",
                            "id": "primitive-type-5",
                            "startIndex": 5,
                            "stopIndex": 6,
                            "primitiveType": "binary"
                        },
                        "isOptional": false
                    },
                    {
                        "parameterName": "col2",
                        "parameterType": {
                            "type": "primitive-type",
                            "id": "primitive-type-9",
                            "startIndex": 9,
                            "stopIndex": 10,
                            "primitiveType": "any"
                        },
                        "isOptional": false
                    }
                ],
                "optionalParameterSpecificationList": [],
                "parameterSpecificationList": [
                    {
                        "parameterName": "col1",
                        "parameterType": {
                            "type": "primitive-type",
                            "id": "primitive-type-5",
                            "startIndex": 5,
                            "stopIndex": 6,
                            "primitiveType": "binary"
                        },
                        "isOptional": false
                    },
                    {
                        "parameterName": "col2",
                        "parameterType": {
                            "type": "primitive-type",
                            "id": "primitive-type-9",
                            "startIndex": 9,
                            "stopIndex": 10,
                            "primitiveType": "any"
                        },
                        "isOptional": false
                    }
                ],
                "returnType": {
                    "nullableFlag": false,
                    "primitiveType": "table"
                }
            }
        },
        {
            "input": "type function (col1 as binary, col2 as any, optional col1 as binary, optional col2 as any) as table",
            "output": {
                "type": "function-type",
                "id": "function-type-1",
                "startIndex": 1,
                "stopIndex": 23,
                "requiredParameterSpecificationList": [
                    {
                        "parameterName": "col1",
                        "parameterType": {
                            "type": "primitive-type",
                            "id": "primitive-type-5",
                            "startIndex": 5,
                            "stopIndex": 6,
                            "primitiveType": "binary"
                        },
                        "isOptional": false
                    },
                    {
                        "parameterName": "col2",
                        "parameterType": {
                            "type": "primitive-type",
                            "id": "primitive-type-9",
                            "startIndex": 9,
                            "stopIndex": 10,
                            "primitiveType": "any"
                        },
                        "isOptional": false
                    }
                ],
                "optionalParameterSpecificationList": [
                    {
                        "parameterName": "col1",
                        "parameterType": {
                            "type": "primitive-type",
                            "id": "primitive-type-14",
                            "startIndex": 14,
                            "stopIndex": 15,
                            "primitiveType": "binary"
                        },
                        "isOptional": true
                    },
                    {
                        "parameterName": "col2",
                        "parameterType": {
                            "type": "primitive-type",
                            "id": "primitive-type-19",
                            "startIndex": 19,
                            "stopIndex": 20,
                            "primitiveType": "any"
                        },
                        "isOptional": true
                    }
                ],
                "parameterSpecificationList": [
                    {
                        "parameterName": "col1",
                        "parameterType": {
                            "type": "primitive-type",
                            "id": "primitive-type-5",
                            "startIndex": 5,
                            "stopIndex": 6,
                            "primitiveType": "binary"
                        },
                        "isOptional": false
                    },
                    {
                        "parameterName": "col2",
                        "parameterType": {
                            "type": "primitive-type",
                            "id": "primitive-type-9",
                            "startIndex": 9,
                            "stopIndex": 10,
                            "primitiveType": "any"
                        },
                        "isOptional": false
                    },
                    {
                        "parameterName": "col1",
                        "parameterType": {
                            "type": "primitive-type",
                            "id": "primitive-type-14",
                            "startIndex": 14,
                            "stopIndex": 15,
                            "primitiveType": "binary"
                        },
                        "isOptional": true
                    },
                    {
                        "parameterName": "col2",
                        "parameterType": {
                            "type": "primitive-type",
                            "id": "primitive-type-19",
                            "startIndex": 19,
                            "stopIndex": 20,
                            "primitiveType": "any"
                        },
                        "isOptional": true
                    }
                ],
                "returnType": {
                    "nullableFlag": false,
                    "primitiveType": "table"
                }
            }
        },
        {
            "input": "type nullable any",
            "output": {
                "type": "nullable-type",
                "id": "nullable-type-1",
                "startIndex": 1,
                "stopIndex": 3,
                "nullableType": {
                    "type": "primitive-type",
                    "id": "primitive-type-2",
                    "startIndex": 2,
                    "stopIndex": 3,
                    "primitiveType": "any"
                }
            }
        },
        {
            "input": "type nullable function",
            "output": {
                "type": "nullable-type",
                "id": "nullable-type-1",
                "startIndex": 1,
                "stopIndex": 3,
                "nullableType": {
                    "type": "primitive-type",
                    "id": "primitive-type-2",
                    "startIndex": 2,
                    "stopIndex": 3,
                    "primitiveType": "function"
                }
            }
        },
        {
            "input": "type nullable binary",
            "output": {
                "type": "nullable-type",
                "id": "nullable-type-1",
                "startIndex": 1,
                "stopIndex": 3,
                "nullableType": {
                    "type": "primitive-type",
                    "id": "primitive-type-2",
                    "startIndex": 2,
                    "stopIndex": 3,
                    "primitiveType": "binary"
                }
            }
        },
        {
            "input": "type nullable {any}",
            "output": {
                "type": "nullable-type",
                "id": "nullable-type-1",
                "startIndex": 1,
                "stopIndex": 5,
                "nullableType": {
                    "type": "list-type",
                    "id": "list-type-2",
                    "startIndex": 2,
                    "stopIndex": 5,
                    "itemType": {
                        "type": "primitive-type",
                        "id": "primitive-type-3",
                        "startIndex": 3,
                        "stopIndex": 4,
                        "primitiveType": "any"
                    }
                }
            }
        },
        {
            "input": "type nullable [colName, optional colName = binary, optional colName = any]",
            "output": {
                "type": "nullable-type",
                "id": "nullable-type-1",
                "startIndex": 1,
                "stopIndex": 15,
                "nullableType": {
                    "type": "record-type",
                    "id": "record-type-2",
                    "startIndex": 2,
                    "stopIndex": 15,
                    "hasOpenRecordMarker": false,
                    "fieldSpecificationList": [
                        {
                            "fieldName": "colName",
                            "fieldType": null,
                            "isOptional": false
                        },
                        {
                            "fieldName": "colName",
                            "fieldType": {
                                "type": "primitive-type",
                                "id": "primitive-type-8",
                                "startIndex": 8,
                                "stopIndex": 9,
                                "primitiveType": "binary"
                            },
                            "isOptional": true
                        },
                        {
                            "fieldName": "colName",
                            "fieldType": {
                                "type": "primitive-type",
                                "id": "primitive-type-13",
                                "startIndex": 13,
                                "stopIndex": 14,
                                "primitiveType": "any"
                            },
                            "isOptional": true
                        }
                    ]
                }
            }
        },
        {
            "input": "type nullable table [colName = binary, optional colName, optional colName = any]",
            "output": {
                "type": "nullable-type",
                "id": "nullable-type-1",
                "startIndex": 1,
                "stopIndex": 16,
                "nullableType": {
                    "type": "table-type",
                    "id": "table-type-2",
                    "startIndex": 2,
                    "stopIndex": 16,
                    "fieldSpecificationList": [
                        {
                            "fieldName": "colName",
                            "fieldType": {
                                "type": "primitive-type",
                                "id": "primitive-type-6",
                                "startIndex": 6,
                                "stopIndex": 7,
                                "primitiveType": "binary"
                            },
                            "isOptional": false
                        },
                        {
                            "fieldName": "colName",
                            "fieldType": null,
                            "isOptional": true
                        },
                        {
                            "fieldName": "colName",
                            "fieldType": {
                                "type": "primitive-type",
                                "id": "primitive-type-14",
                                "startIndex": 14,
                                "stopIndex": 15,
                                "primitiveType": "any"
                            },
                            "isOptional": true
                        }
                    ]
                }
            }
        },
        {
            "input": "type nullable function (col1 as binary, col2 as any, optional col1 as binary, optional col2 as any) as table",
            "output": {
                "type": "nullable-type",
                "id": "nullable-type-1",
                "startIndex": 1,
                "stopIndex": 24,
                "nullableType": {
                    "type": "function-type",
                    "id": "function-type-2",
                    "startIndex": 2,
                    "stopIndex": 24,
                    "requiredParameterSpecificationList": [
                        {
                            "parameterName": "col1",
                            "parameterType": {
                                "type": "primitive-type",
                                "id": "primitive-type-6",
                                "startIndex": 6,
                                "stopIndex": 7,
                                "primitiveType": "binary"
                            },
                            "isOptional": false
                        },
                        {
                            "parameterName": "col2",
                            "parameterType": {
                                "type": "primitive-type",
                                "id": "primitive-type-10",
                                "startIndex": 10,
                                "stopIndex": 11,
                                "primitiveType": "any"
                            },
                            "isOptional": false
                        }
                    ],
                    "optionalParameterSpecificationList": [
                        {
                            "parameterName": "col1",
                            "parameterType": {
                                "type": "primitive-type",
                                "id": "primitive-type-15",
                                "startIndex": 15,
                                "stopIndex": 16,
                                "primitiveType": "binary"
                            },
                            "isOptional": true
                        },
                        {
                            "parameterName": "col2",
                            "parameterType": {
                                "type": "primitive-type",
                                "id": "primitive-type-20",
                                "startIndex": 20,
                                "stopIndex": 21,
                                "primitiveType": "any"
                            },
                            "isOptional": true
                        }
                    ],
                    "parameterSpecificationList": [
                        {
                            "parameterName": "col1",
                            "parameterType": {
                                "type": "primitive-type",
                                "id": "primitive-type-6",
                                "startIndex": 6,
                                "stopIndex": 7,
                                "primitiveType": "binary"
                            },
                            "isOptional": false
                        },
                        {
                            "parameterName": "col2",
                            "parameterType": {
                                "type": "primitive-type",
                                "id": "primitive-type-10",
                                "startIndex": 10,
                                "stopIndex": 11,
                                "primitiveType": "any"
                            },
                            "isOptional": false
                        },
                        {
                            "parameterName": "col1",
                            "parameterType": {
                                "type": "primitive-type",
                                "id": "primitive-type-15",
                                "startIndex": 15,
                                "stopIndex": 16,
                                "primitiveType": "binary"
                            },
                            "isOptional": true
                        },
                        {
                            "parameterName": "col2",
                            "parameterType": {
                                "type": "primitive-type",
                                "id": "primitive-type-20",
                                "startIndex": 20,
                                "stopIndex": 21,
                                "primitiveType": "any"
                            },
                            "isOptional": true
                        }
                    ],
                    "returnType": {
                        "nullableFlag": false,
                        "primitiveType": "table"
                    }
                }
            }
        },
        {
            "input": "type nullable ...",
            "output": {
                "type": "nullable-type",
                "id": "nullable-type-1",
                "startIndex": 1,
                "stopIndex": 3,
                "nullableType": {
                    "type": "not-implemented-expression",
                    "id": "not-implemented-expression-2",
                    "startIndex": 2,
                    "stopIndex": 3
                }
            }
        },
        {
            "input": "type nullable sectionName!variableName",
            "output": {
                "type": "nullable-type",
                "id": "nullable-type-1",
                "startIndex": 1,
                "stopIndex": 5,
                "nullableType": {
                    "type": "section-access-expression",
                    "id": "section-access-expression-2",
                    "startIndex": 2,
                    "stopIndex": 5,
                    "firstIdentifierName": "sectionName",
                    "secondIdentifierName": "variableName"
                }
            }
        },
        {
            "input": "type nullable columnName",
            "output": {
                "type": "nullable-type",
                "id": "nullable-type-1",
                "startIndex": 1,
                "stopIndex": 3,
                "nullableType": {
                    "type": "identifier-expression",
                    "id": "identifier-expression-2",
                    "startIndex": 2,
                    "stopIndex": 3,
                    "identifierName": "columnName",
                    "isInclusive": false
                }
            }
        },
        {
            "input": "type nullable @columnName",
            "output": {
                "type": "nullable-type",
                "id": "nullable-type-1",
                "startIndex": 1,
                "stopIndex": 4,
                "nullableType": {
                    "type": "identifier-expression",
                    "id": "identifier-expression-2",
                    "startIndex": 2,
                    "stopIndex": 4,
                    "identifierName": "columnName",
                    "isInclusive": true
                }
            }
        },
        {
            "input": "type nullable 123.123e67",
            "output": {
                "type": "nullable-type",
                "id": "nullable-type-1",
                "startIndex": 1,
                "stopIndex": 3,
                "nullableType": {
                    "type": "literal-expression",
                    "id": "literal-expression-2",
                    "startIndex": 2,
                    "stopIndex": 3,
                    "literalValue": "123.123e67",
                    "literalType": "number-literal"
                }
            }
        },
        {
            "input": "type nullable \"with \"\"quoted text\"\" and # hash\"",
            "output": {
                "type": "nullable-type",
                "id": "nullable-type-1",
                "startIndex": 1,
                "stopIndex": 3,
                "nullableType": {
                    "type": "literal-expression",
                    "id": "literal-expression-2",
                    "startIndex": 2,
                    "stopIndex": 3,
                    "literalValue": "\"with \"\"quoted text\"\" and # hash\"",
                    "literalType": "text-literal"
                }
            }
        },
        {
            "input": "type nullable false",
            "output": {
                "type": "nullable-type",
                "id": "nullable-type-1",
                "startIndex": 1,
                "stopIndex": 3,
                "nullableType": {
                    "type": "literal-expression",
                    "id": "literal-expression-2",
                    "startIndex": 2,
                    "stopIndex": 3,
                    "literalValue": "false",
                    "literalType": "logical-literal"
                }
            }
        },
        {
            "input": "type nullable null",
            "output": {
                "type": "nullable-type",
                "id": "nullable-type-1",
                "startIndex": 1,
                "stopIndex": 3,
                "nullableType": {
                    "type": "literal-expression",
                    "id": "literal-expression-2",
                    "startIndex": 2,
                    "stopIndex": 3,
                    "literalValue": "null",
                    "literalType": "null-literal"
                }
            }
        },
        {
            "input": "type nullable {2, 2..5, 6}",
            "output": {
                "type": "nullable-type",
                "id": "nullable-type-1",
                "startIndex": 1,
                "stopIndex": 11,
                "nullableType": {
                    "type": "list-expression",
                    "id": "list-expression-2",
                    "startIndex": 2,
                    "stopIndex": 11,
                    "itemList": [
                        {
                            "type": "item",
                            "id": "item-3",
                            "startIndex": 3,
                            "stopIndex": 4,
                            "expression": {
                                "type": "literal-expression",
                                "id": "literal-expression-3",
                                "startIndex": 3,
                                "stopIndex": 4,
                                "literalValue": "2",
                                "literalType": "number-literal"
                            },
                            "isSequenceItem": false,
                            "secondExpression": null
                        },
                        {
                            "type": "item",
                            "id": "item-5",
                            "startIndex": 5,
                            "stopIndex": 8,
                            "expression": {
                                "type": "literal-expression",
                                "id": "literal-expression-5",
                                "startIndex": 5,
                                "stopIndex": 6,
                                "literalValue": "2",
                                "literalType": "number-literal"
                            },
                            "isSequenceItem": true,
                            "secondExpression": {
                                "type": "literal-expression",
                                "id": "literal-expression-7",
                                "startIndex": 7,
                                "stopIndex": 8,
                                "literalValue": "5",
                                "literalType": "number-literal"
                            }
                        },
                        {
                            "type": "item",
                            "id": "item-9",
                            "startIndex": 9,
                            "stopIndex": 10,
                            "expression": {
                                "type": "literal-expression",
                                "id": "literal-expression-9",
                                "startIndex": 9,
                                "stopIndex": 10,
                                "literalValue": "6",
                                "literalType": "number-literal"
                            },
                            "isSequenceItem": false,
                            "secondExpression": null
                        }
                    ]
                }
            }
        },
        {
            "input": "type nullable [columnName = 2, anotherCol = 4]",
            "output": {
                "type": "nullable-type",
                "id": "nullable-type-1",
                "startIndex": 1,
                "stopIndex": 11,
                "nullableType": {
                    "type": "record-type",
                    "id": "record-type-2",
                    "startIndex": 2,
                    "stopIndex": 11,
                    "hasOpenRecordMarker": false,
                    "fieldSpecificationList": [
                        {
                            "fieldName": "columnName",
                            "fieldType": {
                                "type": "literal-expression",
                                "id": "literal-expression-5",
                                "startIndex": 5,
                                "stopIndex": 6,
                                "literalValue": "2",
                                "literalType": "number-literal"
                            },
                            "isOptional": false
                        },
                        {
                            "fieldName": "anotherCol",
                            "fieldType": {
                                "type": "literal-expression",
                                "id": "literal-expression-9",
                                "startIndex": 9,
                                "stopIndex": 10,
                                "literalValue": "4",
                                "literalType": "number-literal"
                            },
                            "isOptional": false
                        }
                    ]
                }
            }
        },
        {
            "input": "type nullable tableName [[#\"Column name\"], [#\"Column name\"]]",
            "output": {
                "type": "nullable-type",
                "id": "nullable-type-1",
                "startIndex": 1,
                "stopIndex": 12,
                "nullableType": {
                    "type": "field-access-expression",
                    "id": "field-access-expression-3",
                    "startIndex": 3,
                    "stopIndex": 12,
                    "selectedPrimaryExpression": {
                        "type": "identifier-expression",
                        "id": "identifier-expression-2",
                        "startIndex": 2,
                        "stopIndex": 3,
                        "identifierName": "tableName",
                        "isInclusive": false
                    },
                    "implicitTargetFieldSelection": null,
                    "implicitTargetProjection": [
                        "#\"Column name\"",
                        "#\"Column name\""
                    ],
                    "isOptionalSelection": false
                }
            }
        },
        {
            "input": "type nullable tableName {columns}",
            "output": {
                "type": "nullable-type",
                "id": "nullable-type-1",
                "startIndex": 1,
                "stopIndex": 6,
                "nullableType": {
                    "type": "item-access-expression",
                    "id": "item-access-expression-3",
                    "startIndex": 3,
                    "stopIndex": 6,
                    "selectedPrimaryExpression": {
                        "type": "identifier-expression",
                        "id": "identifier-expression-2",
                        "startIndex": 2,
                        "stopIndex": 3,
                        "identifierName": "tableName",
                        "isInclusive": false
                    },
                    "itemSelector": {
                        "type": "identifier-expression",
                        "id": "identifier-expression-4",
                        "startIndex": 4,
                        "stopIndex": 5,
                        "identifierName": "columns",
                        "isInclusive": false
                    },
                    "isOptionalSelection": false
                }
            }
        },
        {
            "input": "type nullable someFunction (2, 1, 4)",
            "output": {
                "type": "nullable-type",
                "id": "nullable-type-1",
                "startIndex": 1,
                "stopIndex": 10,
                "nullableType": {
                    "type": "invoke-expression",
                    "id": "invoke-expression-3",
                    "startIndex": 3,
                    "stopIndex": 10,
                    "invokedPrimaryExpression": {
                        "type": "identifier-expression",
                        "id": "identifier-expression-2",
                        "startIndex": 2,
                        "stopIndex": 3,
                        "identifierName": "someFunction",
                        "isInclusive": false
                    },
                    "argumentList": [
                        {
                            "type": "literal-expression",
                            "id": "literal-expression-4",
                            "startIndex": 4,
                            "stopIndex": 5,
                            "literalValue": "2",
                            "literalType": "number-literal"
                        },
                        {
                            "type": "literal-expression",
                            "id": "literal-expression-6",
                            "startIndex": 6,
                            "stopIndex": 7,
                            "literalValue": "1",
                            "literalType": "number-literal"
                        },
                        {
                            "type": "literal-expression",
                            "id": "literal-expression-8",
                            "startIndex": 8,
                            "stopIndex": 9,
                            "literalValue": "4",
                            "literalType": "number-literal"
                        }
                    ]
                }
            }
        },
        {
            "input": "...",
            "output": {
                "type": "not-implemented-expression",
                "id": "not-implemented-expression-0",
                "startIndex": 0,
                "stopIndex": 1
            }
        },
        {
            "input": "sectionName!variableName",
            "output": {
                "type": "section-access-expression",
                "id": "section-access-expression-0",
                "startIndex": 0,
                "stopIndex": 3,
                "firstIdentifierName": "sectionName",
                "secondIdentifierName": "variableName"
            }
        },
        {
            "input": "a",
            "output": {
                "type": "identifier-expression",
                "id": "identifier-expression-0",
                "startIndex": 0,
                "stopIndex": 1,
                "identifierName": "a",
                "isInclusive": false
            }
        },
        {
            "input": "@a",
            "output": {
                "type": "identifier-expression",
                "id": "identifier-expression-0",
                "startIndex": 0,
                "stopIndex": 2,
                "identifierName": "a",
                "isInclusive": true
            }
        },
        {
            "input": "columnName",
            "output": {
                "type": "identifier-expression",
                "id": "identifier-expression-0",
                "startIndex": 0,
                "stopIndex": 1,
                "identifierName": "columnName",
                "isInclusive": false
            }
        },
        {
            "input": "@columnName",
            "output": {
                "type": "identifier-expression",
                "id": "identifier-expression-0",
                "startIndex": 0,
                "stopIndex": 2,
                "identifierName": "columnName",
                "isInclusive": true
            }
        },
        {
            "input": "#datetimezone",
            "output": {
                "type": "identifier-expression",
                "id": "identifier-expression-0",
                "startIndex": 0,
                "stopIndex": 1,
                "identifierName": "#datetimezone",
                "isInclusive": false
            }
        },
        {
            "input": "#\"1998 Sales\"",
            "output": {
                "type": "identifier-expression",
                "id": "identifier-expression-0",
                "startIndex": 0,
                "stopIndex": 1,
                "identifierName": "#\"1998 Sales\"",
                "isInclusive": false
            }
        },
        {
            "input": "@#\"1998 Sales\"",
            "output": {
                "type": "identifier-expression",
                "id": "identifier-expression-0",
                "startIndex": 0,
                "stopIndex": 2,
                "identifierName": "#\"1998 Sales\"",
                "isInclusive": true
            }
        },
        {
            "input": "123",
            "output": {
                "type": "literal-expression",
                "id": "literal-expression-0",
                "startIndex": 0,
                "stopIndex": 1,
                "literalValue": "123",
                "literalType": "number-literal"
            }
        },
        {
            "input": ".123e+67",
            "output": {
                "type": "literal-expression",
                "id": "literal-expression-0",
                "startIndex": 0,
                "stopIndex": 1,
                "literalValue": ".123e+67",
                "literalType": "number-literal"
            }
        },
        {
            "input": "123.123e67",
            "output": {
                "type": "literal-expression",
                "id": "literal-expression-0",
                "startIndex": 0,
                "stopIndex": 1,
                "literalValue": "123.123e67",
                "literalType": "number-literal"
            }
        },
        {
            "input": "0xffFF435",
            "output": {
                "type": "literal-expression",
                "id": "literal-expression-0",
                "startIndex": 0,
                "stopIndex": 1,
                "literalValue": "0xffFF435",
                "literalType": "number-literal"
            }
        },
        {
            "input": "\"some text\"",
            "output": {
                "type": "literal-expression",
                "id": "literal-expression-0",
                "startIndex": 0,
                "stopIndex": 1,
                "literalValue": "\"some text\"",
                "literalType": "text-literal"
            }
        },
        {
            "input": "\"with \"\"quoted text\"\" and # hash\"",
            "output": {
                "type": "literal-expression",
                "id": "literal-expression-0",
                "startIndex": 0,
                "stopIndex": 1,
                "literalValue": "\"with \"\"quoted text\"\" and # hash\"",
                "literalType": "text-literal"
            }
        },
        {
            "input": "\"some #(cr) text\"",
            "output": {
                "type": "literal-expression",
                "id": "literal-expression-0",
                "startIndex": 0,
                "stopIndex": 1,
                "literalValue": "\"some #(cr) text\"",
                "literalType": "text-literal"
            }
        },
        {
            "input": "false",
            "output": {
                "type": "literal-expression",
                "id": "literal-expression-0",
                "startIndex": 0,
                "stopIndex": 1,
                "literalValue": "false",
                "literalType": "logical-literal"
            }
        },
        {
            "input": "true",
            "output": {
                "type": "literal-expression",
                "id": "literal-expression-0",
                "startIndex": 0,
                "stopIndex": 1,
                "literalValue": "true",
                "literalType": "logical-literal"
            }
        },
        {
            "input": "null",
            "output": {
                "type": "literal-expression",
                "id": "literal-expression-0",
                "startIndex": 0,
                "stopIndex": 1,
                "literalValue": "null",
                "literalType": "null-literal"
            }
        },
        {
            "input": "(...)",
            "output": {
                "type": "not-implemented-expression",
                "id": "not-implemented-expression-1",
                "startIndex": 0,
                "stopIndex": 3
            }
        },
        {
            "input": "(sectionName!variableName)",
            "output": {
                "type": "section-access-expression",
                "id": "section-access-expression-1",
                "startIndex": 0,
                "stopIndex": 5,
                "firstIdentifierName": "sectionName",
                "secondIdentifierName": "variableName"
            }
        },
        {
            "input": "(a)",
            "output": {
                "type": "identifier-expression",
                "id": "identifier-expression-1",
                "startIndex": 0,
                "stopIndex": 3,
                "identifierName": "a",
                "isInclusive": false
            }
        },
        {
            "input": "(@a)",
            "output": {
                "type": "identifier-expression",
                "id": "identifier-expression-1",
                "startIndex": 0,
                "stopIndex": 4,
                "identifierName": "a",
                "isInclusive": true
            }
        },
        {
            "input": "(columnName)",
            "output": {
                "type": "identifier-expression",
                "id": "identifier-expression-1",
                "startIndex": 0,
                "stopIndex": 3,
                "identifierName": "columnName",
                "isInclusive": false
            }
        },
        {
            "input": "(@columnName)",
            "output": {
                "type": "identifier-expression",
                "id": "identifier-expression-1",
                "startIndex": 0,
                "stopIndex": 4,
                "identifierName": "columnName",
                "isInclusive": true
            }
        },
        {
            "input": "(#datetimezone)",
            "output": {
                "type": "identifier-expression",
                "id": "identifier-expression-1",
                "startIndex": 0,
                "stopIndex": 3,
                "identifierName": "#datetimezone",
                "isInclusive": false
            }
        },
        {
            "input": "(#\"1998 Sales\")",
            "output": {
                "type": "identifier-expression",
                "id": "identifier-expression-1",
                "startIndex": 0,
                "stopIndex": 3,
                "identifierName": "#\"1998 Sales\"",
                "isInclusive": false
            }
        },
        {
            "input": "(@#\"1998 Sales\")",
            "output": {
                "type": "identifier-expression",
                "id": "identifier-expression-1",
                "startIndex": 0,
                "stopIndex": 4,
                "identifierName": "#\"1998 Sales\"",
                "isInclusive": true
            }
        },
        {
            "input": "(123)",
            "output": {
                "type": "literal-expression",
                "id": "literal-expression-1",
                "startIndex": 0,
                "stopIndex": 3,
                "literalValue": "123",
                "literalType": "number-literal"
            }
        },
        {
            "input": "(.123e+67)",
            "output": {
                "type": "literal-expression",
                "id": "literal-expression-1",
                "startIndex": 0,
                "stopIndex": 3,
                "literalValue": ".123e+67",
                "literalType": "number-literal"
            }
        },
        {
            "input": "(123.123e67)",
            "output": {
                "type": "literal-expression",
                "id": "literal-expression-1",
                "startIndex": 0,
                "stopIndex": 3,
                "literalValue": "123.123e67",
                "literalType": "number-literal"
            }
        },
        {
            "input": "(0xffFF435)",
            "output": {
                "type": "literal-expression",
                "id": "literal-expression-1",
                "startIndex": 0,
                "stopIndex": 3,
                "literalValue": "0xffFF435",
                "literalType": "number-literal"
            }
        },
        {
            "input": "(\"some text\")",
            "output": {
                "type": "literal-expression",
                "id": "literal-expression-1",
                "startIndex": 0,
                "stopIndex": 3,
                "literalValue": "\"some text\"",
                "literalType": "text-literal"
            }
        },
        {
            "input": "(\"with \"\"quoted text\"\" and # hash\")",
            "output": {
                "type": "literal-expression",
                "id": "literal-expression-1",
                "startIndex": 0,
                "stopIndex": 3,
                "literalValue": "\"with \"\"quoted text\"\" and # hash\"",
                "literalType": "text-literal"
            }
        },
        {
            "input": "(\"some #(cr) text\")",
            "output": {
                "type": "literal-expression",
                "id": "literal-expression-1",
                "startIndex": 0,
                "stopIndex": 3,
                "literalValue": "\"some #(cr) text\"",
                "literalType": "text-literal"
            }
        },
        {
            "input": "(false)",
            "output": {
                "type": "literal-expression",
                "id": "literal-expression-1",
                "startIndex": 0,
                "stopIndex": 3,
                "literalValue": "false",
                "literalType": "logical-literal"
            }
        },
        {
            "input": "(true)",
            "output": {
                "type": "literal-expression",
                "id": "literal-expression-1",
                "startIndex": 0,
                "stopIndex": 3,
                "literalValue": "true",
                "literalType": "logical-literal"
            }
        },
        {
            "input": "(null)",
            "output": {
                "type": "literal-expression",
                "id": "literal-expression-1",
                "startIndex": 0,
                "stopIndex": 3,
                "literalValue": "null",
                "literalType": "null-literal"
            }
        },
        {
            "input": "{2, 2..5, 6}",
            "output": {
                "type": "list-expression",
                "id": "list-expression-0",
                "startIndex": 0,
                "stopIndex": 9,
                "itemList": [
                    {
                        "type": "item",
                        "id": "item-1",
                        "startIndex": 1,
                        "stopIndex": 2,
                        "expression": {
                            "type": "literal-expression",
                            "id": "literal-expression-1",
                            "startIndex": 1,
                            "stopIndex": 2,
                            "literalValue": "2",
                            "literalType": "number-literal"
                        },
                        "isSequenceItem": false,
                        "secondExpression": null
                    },
                    {
                        "type": "item",
                        "id": "item-3",
                        "startIndex": 3,
                        "stopIndex": 6,
                        "expression": {
                            "type": "literal-expression",
                            "id": "literal-expression-3",
                            "startIndex": 3,
                            "stopIndex": 4,
                            "literalValue": "2",
                            "literalType": "number-literal"
                        },
                        "isSequenceItem": true,
                        "secondExpression": {
                            "type": "literal-expression",
                            "id": "literal-expression-5",
                            "startIndex": 5,
                            "stopIndex": 6,
                            "literalValue": "5",
                            "literalType": "number-literal"
                        }
                    },
                    {
                        "type": "item",
                        "id": "item-7",
                        "startIndex": 7,
                        "stopIndex": 8,
                        "expression": {
                            "type": "literal-expression",
                            "id": "literal-expression-7",
                            "startIndex": 7,
                            "stopIndex": 8,
                            "literalValue": "6",
                            "literalType": "number-literal"
                        },
                        "isSequenceItem": false,
                        "secondExpression": null
                    }
                ]
            }
        },
        {
            "input": "{2, \"b\"..\"d\", 6}",
            "output": {
                "type": "list-expression",
                "id": "list-expression-0",
                "startIndex": 0,
                "stopIndex": 9,
                "itemList": [
                    {
                        "type": "item",
                        "id": "item-1",
                        "startIndex": 1,
                        "stopIndex": 2,
                        "expression": {
                            "type": "literal-expression",
                            "id": "literal-expression-1",
                            "startIndex": 1,
                            "stopIndex": 2,
                            "literalValue": "2",
                            "literalType": "number-literal"
                        },
                        "isSequenceItem": false,
                        "secondExpression": null
                    },
                    {
                        "type": "item",
                        "id": "item-3",
                        "startIndex": 3,
                        "stopIndex": 6,
                        "expression": {
                            "type": "literal-expression",
                            "id": "literal-expression-3",
                            "startIndex": 3,
                            "stopIndex": 4,
                            "literalValue": "\"b\"",
                            "literalType": "text-literal"
                        },
                        "isSequenceItem": true,
                        "secondExpression": {
                            "type": "literal-expression",
                            "id": "literal-expression-5",
                            "startIndex": 5,
                            "stopIndex": 6,
                            "literalValue": "\"d\"",
                            "literalType": "text-literal"
                        }
                    },
                    {
                        "type": "item",
                        "id": "item-7",
                        "startIndex": 7,
                        "stopIndex": 8,
                        "expression": {
                            "type": "literal-expression",
                            "id": "literal-expression-7",
                            "startIndex": 7,
                            "stopIndex": 8,
                            "literalValue": "6",
                            "literalType": "number-literal"
                        },
                        "isSequenceItem": false,
                        "secondExpression": null
                    }
                ]
            }
        },
        {
            "input": "{}",
            "output": {
                "type": "list-expression",
                "id": "list-expression-0",
                "startIndex": 0,
                "stopIndex": 2,
                "itemList": []
            }
        },
        {
            "input": "[columnName = 2, anotherCol = 4]",
            "output": {
                "type": "record-expression",
                "id": "record-expression-0",
                "startIndex": 0,
                "stopIndex": 9,
                "fieldList": [
                    {
                        "fieldName": "columnName",
                        "expression": {
                            "type": "literal-expression",
                            "id": "literal-expression-3",
                            "startIndex": 3,
                            "stopIndex": 4,
                            "literalValue": "2",
                            "literalType": "number-literal"
                        }
                    },
                    {
                        "fieldName": "anotherCol",
                        "expression": {
                            "type": "literal-expression",
                            "id": "literal-expression-7",
                            "startIndex": 7,
                            "stopIndex": 8,
                            "literalValue": "4",
                            "literalType": "number-literal"
                        }
                    }
                ]
            }
        },
        {
            "input": "[]",
            "output": {
                "type": "record-expression",
                "id": "record-expression-0",
                "startIndex": 0,
                "stopIndex": 2,
                "fieldList": []
            }
        },
        {
            "input": "[columnName]?",
            "output": {
                "type": "field-access-expression",
                "id": "field-access-expression-0",
                "startIndex": 0,
                "stopIndex": 4,
                "selectedPrimaryExpression": null,
                "implicitTargetFieldSelection": "columnName",
                "implicitTargetProjection": null,
                "isOptionalSelection": true
            }
        },
        {
            "input": "[let]?",
            "output": {
                "type": "field-access-expression",
                "id": "field-access-expression-0",
                "startIndex": 0,
                "stopIndex": 4,
                "selectedPrimaryExpression": null,
                "implicitTargetFieldSelection": "let",
                "implicitTargetProjection": null,
                "isOptionalSelection": true
            }
        },
        {
            "input": "[column name]",
            "output": {
                "type": "field-access-expression",
                "id": "field-access-expression-0",
                "startIndex": 0,
                "stopIndex": 4,
                "selectedPrimaryExpression": null,
                "implicitTargetFieldSelection": "column name",
                "implicitTargetProjection": null,
                "isOptionalSelection": false
            }
        },
        {
            "input": "[tableName.columnName]?",
            "output": {
                "type": "field-access-expression",
                "id": "field-access-expression-0",
                "startIndex": 0,
                "stopIndex": 4,
                "selectedPrimaryExpression": null,
                "implicitTargetFieldSelection": "tableName.columnName",
                "implicitTargetProjection": null,
                "isOptionalSelection": true
            }
        },
        {
            "input": "[#\"Column name\"]",
            "output": {
                "type": "field-access-expression",
                "id": "field-access-expression-0",
                "startIndex": 0,
                "stopIndex": 3,
                "selectedPrimaryExpression": null,
                "implicitTargetFieldSelection": "#\"Column name\"",
                "implicitTargetProjection": null,
                "isOptionalSelection": false
            }
        },
        {
            "input": "[[columnName], [columnName]]",
            "output": {
                "type": "field-access-expression",
                "id": "field-access-expression-0",
                "startIndex": 0,
                "stopIndex": 9,
                "selectedPrimaryExpression": null,
                "implicitTargetFieldSelection": null,
                "implicitTargetProjection": ["columnName", "columnName"],
                "isOptionalSelection": false
            }
        },
        {
            "input": "[[let], [let]]?",
            "output": {
                "type": "field-access-expression",
                "id": "field-access-expression-0",
                "startIndex": 0,
                "stopIndex": 10,
                "selectedPrimaryExpression": null,
                "implicitTargetFieldSelection": null,
                "implicitTargetProjection": ["let", "let"],
                "isOptionalSelection": true
            }
        },
        {
            "input": "[[column name], [column name]]",
            "output": {
                "type": "field-access-expression",
                "id": "field-access-expression-0",
                "startIndex": 0,
                "stopIndex": 11,
                "selectedPrimaryExpression": null,
                "implicitTargetFieldSelection": null,
                "implicitTargetProjection": ["column name", "column name"],
                "isOptionalSelection": false
            }
        },
        {
            "input": "[[tableName.columnName], [tableName.columnName]]?",
            "output": {
                "type": "field-access-expression",
                "id": "field-access-expression-0",
                "startIndex": 0,
                "stopIndex": 10,
                "selectedPrimaryExpression": null,
                "implicitTargetFieldSelection": null,
                "implicitTargetProjection": [
                    "tableName.columnName",
                    "tableName.columnName"
                ],
                "isOptionalSelection": true
            }
        },
        {
            "input": "[[#\"Column name\"], [#\"Column name\"]]",
            "output": {
                "type": "field-access-expression",
                "id": "field-access-expression-0",
                "startIndex": 0,
                "stopIndex": 9,
                "selectedPrimaryExpression": null,
                "implicitTargetFieldSelection": null,
                "implicitTargetProjection": [
                    "#\"Column name\"",
                    "#\"Column name\""
                ],
                "isOptionalSelection": false
            }
        },
        {
            "input": "tableName [columnName]?",
            "output": {
                "type": "field-access-expression",
                "id": "field-access-expression-1",
                "startIndex": 1,
                "stopIndex": 5,
                "selectedPrimaryExpression": {
                    "type": "identifier-expression",
                    "id": "identifier-expression-0",
                    "startIndex": 0,
                    "stopIndex": 1,
                    "identifierName": "tableName",
                    "isInclusive": false
                },
                "implicitTargetFieldSelection": "columnName",
                "implicitTargetProjection": null,
                "isOptionalSelection": true
            }
        },
        {
            "input": "tableName [let]?",
            "output": {
                "type": "field-access-expression",
                "id": "field-access-expression-1",
                "startIndex": 1,
                "stopIndex": 5,
                "selectedPrimaryExpression": {
                    "type": "identifier-expression",
                    "id": "identifier-expression-0",
                    "startIndex": 0,
                    "stopIndex": 1,
                    "identifierName": "tableName",
                    "isInclusive": false
                },
                "implicitTargetFieldSelection": "let",
                "implicitTargetProjection": null,
                "isOptionalSelection": true
            }
        },
        {
            "input": "tableName [column name]",
            "output": {
                "type": "field-access-expression",
                "id": "field-access-expression-1",
                "startIndex": 1,
                "stopIndex": 5,
                "selectedPrimaryExpression": {
                    "type": "identifier-expression",
                    "id": "identifier-expression-0",
                    "startIndex": 0,
                    "stopIndex": 1,
                    "identifierName": "tableName",
                    "isInclusive": false
                },
                "implicitTargetFieldSelection": "column name",
                "implicitTargetProjection": null,
                "isOptionalSelection": false
            }
        },
        {
            "input": "tableName [tableName.columnName]?",
            "output": {
                "type": "field-access-expression",
                "id": "field-access-expression-1",
                "startIndex": 1,
                "stopIndex": 5,
                "selectedPrimaryExpression": {
                    "type": "identifier-expression",
                    "id": "identifier-expression-0",
                    "startIndex": 0,
                    "stopIndex": 1,
                    "identifierName": "tableName",
                    "isInclusive": false
                },
                "implicitTargetFieldSelection": "tableName.columnName",
                "implicitTargetProjection": null,
                "isOptionalSelection": true
            }
        },
        {
            "input": "tableName [#\"Column name\"]",
            "output": {
                "type": "field-access-expression",
                "id": "field-access-expression-1",
                "startIndex": 1,
                "stopIndex": 4,
                "selectedPrimaryExpression": {
                    "type": "identifier-expression",
                    "id": "identifier-expression-0",
                    "startIndex": 0,
                    "stopIndex": 1,
                    "identifierName": "tableName",
                    "isInclusive": false
                },
                "implicitTargetFieldSelection": "#\"Column name\"",
                "implicitTargetProjection": null,
                "isOptionalSelection": false
            }
        },
        {
            "input": "tableName [[columnName], [columnName]]",
            "output": {
                "type": "field-access-expression",
                "id": "field-access-expression-1",
                "startIndex": 1,
                "stopIndex": 10,
                "selectedPrimaryExpression": {
                    "type": "identifier-expression",
                    "id": "identifier-expression-0",
                    "startIndex": 0,
                    "stopIndex": 1,
                    "identifierName": "tableName",
                    "isInclusive": false
                },
                "implicitTargetFieldSelection": null,
                "implicitTargetProjection": ["columnName", "columnName"],
                "isOptionalSelection": false
            }
        },
        {
            "input": "tableName [[let], [let]]?",
            "output": {
                "type": "field-access-expression",
                "id": "field-access-expression-1",
                "startIndex": 1,
                "stopIndex": 11,
                "selectedPrimaryExpression": {
                    "type": "identifier-expression",
                    "id": "identifier-expression-0",
                    "startIndex": 0,
                    "stopIndex": 1,
                    "identifierName": "tableName",
                    "isInclusive": false
                },
                "implicitTargetFieldSelection": null,
                "implicitTargetProjection": ["let", "let"],
                "isOptionalSelection": true
            }
        },
        {
            "input": "tableName [[column name], [column name]]",
            "output": {
                "type": "field-access-expression",
                "id": "field-access-expression-1",
                "startIndex": 1,
                "stopIndex": 12,
                "selectedPrimaryExpression": {
                    "type": "identifier-expression",
                    "id": "identifier-expression-0",
                    "startIndex": 0,
                    "stopIndex": 1,
                    "identifierName": "tableName",
                    "isInclusive": false
                },
                "implicitTargetFieldSelection": null,
                "implicitTargetProjection": ["column name", "column name"],
                "isOptionalSelection": false
            }
        },
        {
            "input": "tableName [[tableName.columnName], [tableName.columnName]]?",
            "output": {
                "type": "field-access-expression",
                "id": "field-access-expression-1",
                "startIndex": 1,
                "stopIndex": 11,
                "selectedPrimaryExpression": {
                    "type": "identifier-expression",
                    "id": "identifier-expression-0",
                    "startIndex": 0,
                    "stopIndex": 1,
                    "identifierName": "tableName",
                    "isInclusive": false
                },
                "implicitTargetFieldSelection": null,
                "implicitTargetProjection": [
                    "tableName.columnName",
                    "tableName.columnName"
                ],
                "isOptionalSelection": true
            }
        },
        {
            "input": "tableName [[#\"Column name\"], [#\"Column name\"]]",
            "output": {
                "type": "field-access-expression",
                "id": "field-access-expression-1",
                "startIndex": 1,
                "stopIndex": 10,
                "selectedPrimaryExpression": {
                    "type": "identifier-expression",
                    "id": "identifier-expression-0",
                    "startIndex": 0,
                    "stopIndex": 1,
                    "identifierName": "tableName",
                    "isInclusive": false
                },
                "implicitTargetFieldSelection": null,
                "implicitTargetProjection": [
                    "#\"Column name\"",
                    "#\"Column name\""
                ],
                "isOptionalSelection": false
            }
        },
        {
            "input": "tableName {2}",
            "output": {
                "type": "item-access-expression",
                "id": "item-access-expression-1",
                "startIndex": 1,
                "stopIndex": 4,
                "selectedPrimaryExpression": {
                    "type": "identifier-expression",
                    "id": "identifier-expression-0",
                    "startIndex": 0,
                    "stopIndex": 1,
                    "identifierName": "tableName",
                    "isInclusive": false
                },
                "itemSelector": {
                    "type": "literal-expression",
                    "id": "literal-expression-2",
                    "startIndex": 2,
                    "stopIndex": 3,
                    "literalValue": "2",
                    "literalType": "number-literal"
                },
                "isOptionalSelection": false
            }
        },
        {
            "input": "tableName {2+2}?",
            "output": {
                "type": "item-access-expression",
                "id": "item-access-expression-1",
                "startIndex": 1,
                "stopIndex": 7,
                "selectedPrimaryExpression": {
                    "type": "identifier-expression",
                    "id": "identifier-expression-0",
                    "startIndex": 0,
                    "stopIndex": 1,
                    "identifierName": "tableName",
                    "isInclusive": false
                },
                "itemSelector": {
                    "type": "additive-expression",
                    "id": "additive-expression-2",
                    "startIndex": 2,
                    "stopIndex": 5,
                    "leftOperand": {
                        "type": "literal-expression",
                        "id": "literal-expression-2",
                        "startIndex": 2,
                        "stopIndex": 3,
                        "literalValue": "2",
                        "literalType": "number-literal"
                    },
                    "operator": "plus",
                    "rightOperand": {
                        "type": "literal-expression",
                        "id": "literal-expression-4",
                        "startIndex": 4,
                        "stopIndex": 5,
                        "literalValue": "2",
                        "literalType": "number-literal"
                    }
                },
                "isOptionalSelection": true
            }
        },
        {
            "input": "tableName {columns}",
            "output": {
                "type": "item-access-expression",
                "id": "item-access-expression-1",
                "startIndex": 1,
                "stopIndex": 4,
                "selectedPrimaryExpression": {
                    "type": "identifier-expression",
                    "id": "identifier-expression-0",
                    "startIndex": 0,
                    "stopIndex": 1,
                    "identifierName": "tableName",
                    "isInclusive": false
                },
                "itemSelector": {
                    "type": "identifier-expression",
                    "id": "identifier-expression-2",
                    "startIndex": 2,
                    "stopIndex": 3,
                    "identifierName": "columns",
                    "isInclusive": false
                },
                "isOptionalSelection": false
            }
        },
        {
            "input": "someFunction (2, a, 4)",
            "output": {
                "type": "invoke-expression",
                "id": "invoke-expression-1",
                "startIndex": 1,
                "stopIndex": 8,
                "invokedPrimaryExpression": {
                    "type": "identifier-expression",
                    "id": "identifier-expression-0",
                    "startIndex": 0,
                    "stopIndex": 1,
                    "identifierName": "someFunction",
                    "isInclusive": false
                },
                "argumentList": [
                    {
                        "type": "literal-expression",
                        "id": "literal-expression-2",
                        "startIndex": 2,
                        "stopIndex": 3,
                        "literalValue": "2",
                        "literalType": "number-literal"
                    },
                    {
                        "type": "identifier-expression",
                        "id": "identifier-expression-4",
                        "startIndex": 4,
                        "stopIndex": 5,
                        "identifierName": "a",
                        "isInclusive": false
                    },
                    {
                        "type": "literal-expression",
                        "id": "literal-expression-6",
                        "startIndex": 6,
                        "stopIndex": 7,
                        "literalValue": "4",
                        "literalType": "number-literal"
                    }
                ]
            }
        },
        {
            "input": "someFunction (2, 1, 4)",
            "output": {
                "type": "invoke-expression",
                "id": "invoke-expression-1",
                "startIndex": 1,
                "stopIndex": 8,
                "invokedPrimaryExpression": {
                    "type": "identifier-expression",
                    "id": "identifier-expression-0",
                    "startIndex": 0,
                    "stopIndex": 1,
                    "identifierName": "someFunction",
                    "isInclusive": false
                },
                "argumentList": [
                    {
                        "type": "literal-expression",
                        "id": "literal-expression-2",
                        "startIndex": 2,
                        "stopIndex": 3,
                        "literalValue": "2",
                        "literalType": "number-literal"
                    },
                    {
                        "type": "literal-expression",
                        "id": "literal-expression-4",
                        "startIndex": 4,
                        "stopIndex": 5,
                        "literalValue": "1",
                        "literalType": "number-literal"
                    },
                    {
                        "type": "literal-expression",
                        "id": "literal-expression-6",
                        "startIndex": 6,
                        "stopIndex": 7,
                        "literalValue": "4",
                        "literalType": "number-literal"
                    }
                ]
            }
        },
        {
            "input": "someFunction()",
            "output": {
                "type": "invoke-expression",
                "id": "invoke-expression-1",
                "startIndex": 1,
                "stopIndex": 3,
                "invokedPrimaryExpression": {
                    "type": "identifier-expression",
                    "id": "identifier-expression-0",
                    "startIndex": 0,
                    "stopIndex": 1,
                    "identifierName": "someFunction",
                    "isInclusive": false
                },
                "argumentList": []
            }
        },
        {
            "input": "(col1 as nullable binary, optional col2 as any) as table => 1000",
            "output": {
                "type": "function-expression",
                "id": "function-expression-0",
                "startIndex": 0,
                "stopIndex": 15,
                "fixedParameterList": [
                    {
                        "parameterName": "col1",
                        "nullableFlag": true,
                        "primitiveType": "binary",
                        "isOptional": false
                    }
                ],
                "optionalParameterList": [
                    {
                        "parameterName": "col2",
                        "nullableFlag": false,
                        "primitiveType": "any",
                        "isOptional": true
                    }
                ],
                "parameterList": [
                    {
                        "parameterName": "col1",
                        "nullableFlag": true,
                        "primitiveType": "binary",
                        "isOptional": false
                    },
                    {
                        "parameterName": "col2",
                        "nullableFlag": false,
                        "primitiveType": "any",
                        "isOptional": true
                    }
                ],
                "returnType": {
                    "nullableFlag": false,
                    "primitiveType": "table"
                },
                "functionBody": {
                    "type": "literal-expression",
                    "id": "literal-expression-14",
                    "startIndex": 14,
                    "stopIndex": 15,
                    "literalValue": "1000",
                    "literalType": "number-literal"
                }
            }
        },
        {
            "input": "() => 1000",
            "output": {
                "type": "function-expression",
                "id": "function-expression-0",
                "startIndex": 0,
                "stopIndex": 4,
                "fixedParameterList": [],
                "optionalParameterList": [],
                "parameterList": [],
                "returnType": null,
                "functionBody": {
                    "type": "literal-expression",
                    "id": "literal-expression-3",
                    "startIndex": 3,
                    "stopIndex": 4,
                    "literalValue": "1000",
                    "literalType": "number-literal"
                }
            }
        },
        {
            "input": "() as nullable binary => 1000",
            "output": {
                "type": "function-expression",
                "id": "function-expression-0",
                "startIndex": 0,
                "stopIndex": 7,
                "fixedParameterList": [],
                "optionalParameterList": [],
                "parameterList": [],
                "returnType": {
                    "nullableFlag": true,
                    "primitiveType": "binary"
                },
                "functionBody": {
                    "type": "literal-expression",
                    "id": "literal-expression-6",
                    "startIndex": 6,
                    "stopIndex": 7,
                    "literalValue": "1000",
                    "literalType": "number-literal"
                }
            }
        },
        {
            "input": "try 1 otherwise 2",
            "output": {
                "type": "error-handling-expression",
                "id": "error-handling-expression-0",
                "startIndex": 0,
                "stopIndex": 4,
                "protectedExpression": {
                    "type": "literal-expression",
                    "id": "literal-expression-1",
                    "startIndex": 1,
                    "stopIndex": 2,
                    "literalValue": "1",
                    "literalType": "number-literal"
                },
                "otherwiseClause": {
                    "defaultExpression": {
                        "type": "literal-expression",
                        "id": "literal-expression-3",
                        "startIndex": 3,
                        "stopIndex": 4,
                        "literalValue": "2",
                        "literalType": "number-literal"
                    }
                },
                "catchClause": null
            }
        },
        {
            "input": "try 1 catch (col) => 2",
            "output": {
                "type": "error-handling-expression",
                "id": "error-handling-expression-0",
                "startIndex": 0,
                "stopIndex": 8,
                "protectedExpression": {
                    "type": "literal-expression",
                    "id": "literal-expression-1",
                    "startIndex": 1,
                    "stopIndex": 2,
                    "literalValue": "1",
                    "literalType": "number-literal"
                },
                "otherwiseClause": null,
                "catchClause": {
                    "parameterName": "col",
                    "functionBody": {
                        "type": "literal-expression",
                        "id": "literal-expression-7",
                        "startIndex": 7,
                        "stopIndex": 8,
                        "literalValue": "2",
                        "literalType": "number-literal"
                    }
                }
            }
        },
        {
            "input": "error 1000",
            "output": {
                "type": "error-raising-expression",
                "id": "error-raising-expression-0",
                "startIndex": 0,
                "stopIndex": 2,
                "expression": {
                    "type": "literal-expression",
                    "id": "literal-expression-1",
                    "startIndex": 1,
                    "stopIndex": 2,
                    "literalValue": "1000",
                    "literalType": "number-literal"
                }
            }
        },
        {
            "input": "if a > b then a else b",
            "output": {
                "type": "if-expression",
                "id": "if-expression-0",
                "startIndex": 0,
                "stopIndex": 8,
                "ifCondition": {
                    "type": "relational-expression",
                    "id": "relational-expression-1",
                    "startIndex": 1,
                    "stopIndex": 4,
                    "leftOperand": {
                        "type": "identifier-expression",
                        "id": "identifier-expression-1",
                        "startIndex": 1,
                        "stopIndex": 2,
                        "identifierName": "a",
                        "isInclusive": false
                    },
                    "operator": "greater-than",
                    "rightOperand": {
                        "type": "identifier-expression",
                        "id": "identifier-expression-3",
                        "startIndex": 3,
                        "stopIndex": 4,
                        "identifierName": "b",
                        "isInclusive": false
                    }
                },
                "trueExpression": {
                    "type": "identifier-expression",
                    "id": "identifier-expression-5",
                    "startIndex": 5,
                    "stopIndex": 6,
                    "identifierName": "a",
                    "isInclusive": false
                },
                "falseExpression": {
                    "type": "identifier-expression",
                    "id": "identifier-expression-7",
                    "startIndex": 7,
                    "stopIndex": 8,
                    "identifierName": "b",
                    "isInclusive": false
                }
            }
        },
        {
            "input": "if 1 then 2 else 3",
            "output": {
                "type": "if-expression",
                "id": "if-expression-0",
                "startIndex": 0,
                "stopIndex": 6,
                "ifCondition": {
                    "type": "literal-expression",
                    "id": "literal-expression-1",
                    "startIndex": 1,
                    "stopIndex": 2,
                    "literalValue": "1",
                    "literalType": "number-literal"
                },
                "trueExpression": {
                    "type": "literal-expression",
                    "id": "literal-expression-3",
                    "startIndex": 3,
                    "stopIndex": 4,
                    "literalValue": "2",
                    "literalType": "number-literal"
                },
                "falseExpression": {
                    "type": "literal-expression",
                    "id": "literal-expression-5",
                    "startIndex": 5,
                    "stopIndex": 6,
                    "literalValue": "3",
                    "literalType": "number-literal"
                }
            }
        },
        {
            "input": "each a * 100",
            "output": {
                "type": "each-expression",
                "id": "each-expression-0",
                "startIndex": 0,
                "stopIndex": 4,
                "expression": {
                    "type": "multiplicative-expression",
                    "id": "multiplicative-expression-1",
                    "startIndex": 1,
                    "stopIndex": 4,
                    "leftOperand": {
                        "type": "identifier-expression",
                        "id": "identifier-expression-1",
                        "startIndex": 1,
                        "stopIndex": 2,
                        "identifierName": "a",
                        "isInclusive": false
                    },
                    "operator": "multiply",
                    "rightOperand": {
                        "type": "literal-expression",
                        "id": "literal-expression-3",
                        "startIndex": 3,
                        "stopIndex": 4,
                        "literalValue": "100",
                        "literalType": "number-literal"
                    }
                }
            }
        },
        {
            "input": "each 100",
            "output": {
                "type": "each-expression",
                "id": "each-expression-0",
                "startIndex": 0,
                "stopIndex": 2,
                "expression": {
                    "type": "literal-expression",
                    "id": "literal-expression-1",
                    "startIndex": 1,
                    "stopIndex": 2,
                    "literalValue": "100",
                    "literalType": "number-literal"
                }
            }
        },
        {
            "input": "\n\t\tlet\n\t\t\tcolumnName = 1000 + 10,\n\t\t\tcolumnName2 = columnName - 10\n\t\tin\n\t\t\tcolumnName2\n\t\t",
            "output": {
                "type": "let-expression",
                "id": "let-expression-0",
                "startIndex": 0,
                "stopIndex": 14,
                "variableList": [
                    {
                        "variableName": "columnName",
                        "expression": {
                            "type": "additive-expression",
                            "id": "additive-expression-3",
                            "startIndex": 3,
                            "stopIndex": 6,
                            "leftOperand": {
                                "type": "literal-expression",
                                "id": "literal-expression-3",
                                "startIndex": 3,
                                "stopIndex": 4,
                                "literalValue": "1000",
                                "literalType": "number-literal"
                            },
                            "operator": "plus",
                            "rightOperand": {
                                "type": "literal-expression",
                                "id": "literal-expression-5",
                                "startIndex": 5,
                                "stopIndex": 6,
                                "literalValue": "10",
                                "literalType": "number-literal"
                            }
                        }
                    },
                    {
                        "variableName": "columnName2",
                        "expression": {
                            "type": "additive-expression",
                            "id": "additive-expression-9",
                            "startIndex": 9,
                            "stopIndex": 12,
                            "leftOperand": {
                                "type": "identifier-expression",
                                "id": "identifier-expression-9",
                                "startIndex": 9,
                                "stopIndex": 10,
                                "identifierName": "columnName",
                                "isInclusive": false
                            },
                            "operator": "minus",
                            "rightOperand": {
                                "type": "literal-expression",
                                "id": "literal-expression-11",
                                "startIndex": 11,
                                "stopIndex": 12,
                                "literalValue": "10",
                                "literalType": "number-literal"
                            }
                        }
                    }
                ],
                "outputExpression": {
                    "type": "identifier-expression",
                    "id": "identifier-expression-13",
                    "startIndex": 13,
                    "stopIndex": 14,
                    "identifierName": "columnName2",
                    "isInclusive": false
                }
            }
        },
        {
            "input": "\n\t\tlet\n\t\t\tcolumnName1 = 1,\n\t\t\tcolumnName2 = 2\n\t\tin\n\t\t\t3\n\t\t",
            "output": {
                "type": "let-expression",
                "id": "let-expression-0",
                "startIndex": 0,
                "stopIndex": 10,
                "variableList": [
                    {
                        "variableName": "columnName1",
                        "expression": {
                            "type": "literal-expression",
                            "id": "literal-expression-3",
                            "startIndex": 3,
                            "stopIndex": 4,
                            "literalValue": "1",
                            "literalType": "number-literal"
                        }
                    },
                    {
                        "variableName": "columnName2",
                        "expression": {
                            "type": "literal-expression",
                            "id": "literal-expression-7",
                            "startIndex": 7,
                            "stopIndex": 8,
                            "literalValue": "2",
                            "literalType": "number-literal"
                        }
                    }
                ],
                "outputExpression": {
                    "type": "literal-expression",
                    "id": "literal-expression-9",
                    "startIndex": 9,
                    "stopIndex": 10,
                    "literalValue": "3",
                    "literalType": "number-literal"
                }
            }
        }
    ]
}
